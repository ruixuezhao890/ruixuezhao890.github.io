[{"title":"「破茧计划」vortexRT操作系统开发全周期实录","url":"/2025/04/21/rtos/vortexRT_0/","content":"VX.00 嵌入式操作系统：为什么要写一个内核何时埋下要写一个嵌入式内核的种子最开始学习嵌入式的操作系统的时候，就已经对这种技术十分感兴趣，这种技术让只有一个内核的单片机能够在宏观上实现任务并行，但其实微观上任务还是串行。第一次使用操作系统实现并行时，观察到led灯与串口能够”并行”运行时，这种复杂的时间交织技术让我感受到了震撼。\n裸机开发的困境：前后台系统的局限在裸机上编程时，我们常常只是一个单线程，我们在while中处理所有的事件，如果我们需要响应一个及时的中断，则是在中断回调函数中设立标志位，然后再在主线程while循环中处理事件，但是这种做法有一个十分明显的弊端：如果在处理中断事件的执行函数之前有一个十分耗费事件的函数调用，那么中断事件的响应会变得延后，这与我们要的即使响应中断事件的初衷相悖。经常写单片机的同学肯定会说我直接把处理中断事件的执行函数放在中断回调函数中不就行了。我们如果这么做了会严重破坏系统实时性，导致高优先级中断被阻塞、共享资源竞争甚至栈溢出等问题。这如同在高速公路应急车道停车，不仅阻碍关键任务通行，还可能引发连环事故。 \n宏观并行的骗局：微观串行的现实学习过freeRTOS或者是国产的RTThred操作系统的想必都知道，操作系统是利用PendSV_Handler中断来进行任务切换，一般是在1ms进行一次任务切换，切换之前保存任务现场，将cpu中的相关的寄存器内的值进行保存，然后切换至另一个任务，加载另一个任务保存下来的cpu相关寄存器的值，这样我们就完成了现场保存与还原现场，还原现场之后还是进行串行执行。这种精妙的寄存器操作如同时钟齿轮的咬合，在1ms的时间片内完成线程的交替。虽然理论很丰满，但是如何实现确实一片空白，我们并不知道实现细节，只是知其然不知其所以然。这让我对这个技术只是拥有片面的认识。\n探究内核实现细节：技术进阶之路我们并不知道在保存cpu相关的寄存器时究竟是保存了哪些具体的寄存器、我们并不知道是如何保证1ms精确时间进行任务切换等问题，这些问题如果只是单纯的看书是没办法理解的，所以这就是为什么需要创建这个工程，来完成进阶之路。并且主流的操作系统基本都由c语言完成，我想使用c++来构建这个操作系统的内核，可能只会实现抢占任务切换，时间片流转可能后续以插件的形式来支持。本工程将会在stm32f407zgt6上完成。工程会参考freertos、µC&#x2F;OS-II、rtthread和scm等操作系统源码（天赋&amp;技术没到独立门户），希望我能顺利完成这个工程并且之后上述困惑能被解决。\n","categories":["嵌入式"],"tags":["rtos","vortexRT"]},{"title":"「破茧计划」vortexRT操作系统开发全周期实录","url":"/2025/04/21/rtos/vortexRT_1/","content":"VX.01 宏调控：条件编译实现内核模块化设计前言在正式开始介绍我的项目之前我先补充这个工程的一些信息。我是使用platformio插件进行开发的，编译工具使用的是gcc。可能有人会问这个插件不是用来开发arduino的嘛？有些片面了，arduino只是一个框架，其实也支持cmsis和cubemx等框架的开发，在这个工程中我选择的就是cubemx的框架开发，因为arduino框架封装的太多层，开发操作系统必定需要触及一些底层的函数。使用cubemx框架在这个插件下的开发体验是和早些年的标准库一样的体验，没有软件来生成初始化代码，都需要自己手动初始化。这对我而言无伤大雅，后续会移植到cubemx生成的工程下，现在的重点是方便编写内核，而不是开发。至于keil5，编译器不同若是有时间会实现对应的接口文件。在这个文章中只分析设计想法，具体实现再GitHub仓库中存有代码 链接：https://github.com/ruixuezhao890/vortexRT，当然一部分重要的函数具体实现我会放在文章里。\n宏调控设计：三层配置体系操作系统一般的做法都是使用宏来配置内核的代码是否加入到编译的过程之中。这个内核也不例外，我是用三层配置体系来控制内核代码的编译分支，下面一一介绍。\n1.1 核心配置宏：必定选择\n此类宏对与内核来说是不可或缺的。如果缺少会导致出现二义性，导致编译器不知如何进行正确的编译，所以为了避免这种情况，采取了一些措施，如下：\n#ifndef vortexRT_PRIORITY_ORDER#error &quot;Error: Config macro vortexRT_PRIORITY_ORDER must be defined!&quot;#endif#if (vortexRT_PRIORITY_ORDER &lt; 0) || (vortexRT_PRIORITY_ORDER &gt; 1)#error &quot;Error: vortexRT_PRIORITY_ORDER must have values 0 or 1 only!&quot;#endif\n第一个判断的意思是vortexRT_PRIORITY_ORDER宏如果未定义，编译器会出现错误提醒，提醒的正是#error后面带的信息。 第二个判断的意思是检测vortexRT_PRIORITY_ORDER宏的取值范围如果不是0或1，编译器也会发出警告。\n通过这种方法，确保了宏必定会被定义并且也确保了值的正确，宏正确的实现了开关的效果。\n1.2功能可选宏：自由选择\n此类宏可以自由选择是否定义，如果没有定义则会使用默认值来进行编译控制，同样对宏的取值范围做了约束。具体如下图：\n#ifndef vortexRT_USER_DEFINED_CRITSECT_ENABLE#define vortexRT_USER_DEFINED_CRITSECT_ENABLE  0#endif#if (vortexRT_USER_DEFINED_CRITSECT_ENABLE &lt; 0) || (vortexRT_USER_DEFINED_CRITSECT_ENABLE &gt; 1)#error &quot;Error: vortexRT_USER_DEFINED_CRITSECT_ENABLE must have values 0 or 1 only!&quot;#endif\n上面的代码是控制是否使用用户自定义的临界区的宏，如果未定义则默认为0，所以一般是使用工程能自带的进入临界区的代码，如有特殊需要则可以使用这个宏来更改。取值前面已经说过不再赘述\n1.3调试宏与扩展宏：特殊功能的开关\nvortexRT_DEBUG_ENABLE: 调试模式开关vortexRT_PROCESS_RESTART_ENABLE: 进程重启功能开关类似上面这两种宏，拥有特殊功能方便使用者对内核的操作\n优先级设置可以设置优先级的高低顺序，以freeRTOS为例子，优先级数字越大，优先级越高。我希望这个内核可以控制优先级顺序通过宏vortexRT_PRIORITY_ORDER来控制到底是数字越大优先级越高还是反之。通过宏vortexRT_PROCESS_COUNT来控制线程数量，最大不能超过31，在这个范围内0-31任意多个线程可随意设定，总共最多32个线程。vortexRT_PRIORITY_ORDER为1时优先级数字越大，优先级越高，为0则反之。如下图\n#if vortexRT_PRIORITY_ORDER == 0        #if vortexRT_PROCESS_COUNT   &gt; 0            pr0,        #endif        #if vortexRT_PROCESS_COUNT   &gt; 1            pr1,        #endif        ...        #if (vortexRT_PROCESS_COUNT   &gt; 31) || (vortexRT_PROCESS_COUNT   &lt; 1)            #error &quot;Invalid Process Count specification! Must be from 1 to 31.&quot;        #endif            prIDLE#else   // vortexRT_PRIORITY_ORDER == 1    enum TPriority &#123;            prIDLE,        #if vortexRT_PROCESS_COUNT   &gt; 30            pr30,        #endif        ...        #if vortexRT_PROCESS_COUNT   &gt; 1            pr1,        #endif        #if vortexRT_PROCESS_COUNT   &gt; 0            pr0        #endif        #if (vortexRT_PROCESS_COUNT   &gt; 31) || (vortexRT_PROCESS_COUNT   &lt; 1)            #error &quot;Invalid Process Count specification! Must be from 1 to 31.&quot;        #endif    &#125;;#endif //vortexRT_PRIORITY_ORDER\n\n为了节省内存，还依照不同的最大线程个数，来控制不同的类型数据。\n#if vortexRT_PROCESS_COUNT &lt; 8    typedef uint_fast8_t TProcessMap;#elif vortexRT_PROCESS_COUNT &lt; 16    typedef uint_fast16_t TProcessMap;#else    typedef uint_fast32_t TProcessMap;#endif\n\n任务状态枚举定义enum TProcessStartState  &#123;      pssRunning,      pssSuspended  &#125;;\n相比与freeRTOS的就绪态、运行态、阻塞态和挂起态，本项目的却只有两种状态，为什么呢？\n仅设计运行(pssRunning)和挂起(pssSuspended)两种初始状态，这种精简设计针对嵌入式场景优化：运行状态直接进入调度队列，挂起状态需手动唤醒。牺牲了状态复杂度换取更少的内存占用和更高确定性，适合资源严格受限的单片机运行\n完整代码连接：https://github.com/ruixuezhao890/vortexRT/blob/main/core/vortexRT_defs.h\n","categories":["嵌入式"],"tags":["rtos","vortexRT"]},{"title":"「破茧计划」vortexRT操作系统开发全周期实录","url":"/2025/04/22/rtos/vortexRT_2/","content":"VX.02  内核设计：最重要的实现从这章开始进入内核的设计，应该会使用几篇内容来详细阐述是为何这么设计，会先从主要的几个内核类开始介绍，以及这些核心类如何协同工作，介绍完成之后在最后会补充剩余没有说明的函数或者是其余设计。逐步揭示进程管理、内存调度、中断处理等关键模块的设计奥秘，最后通过uml类图展现内核运转的全景视图。这些类都在os_kernel.h中声明\nTKernel类设计细节函数与变量补充// 声明操作系统启动函数，使用C语言链接规范// NORETURN 表示该函数不会返回（通常进入无限循环）// sp: 初始进程的栈指针extern &quot;C&quot; NORETURN void os_start(stack_item_t* sp);// 根据上下文切换方案选择不同的上下文切换函数声明#if vortexRT_CONTEXT_SWITCH_SCHEME == 0    // 方案0：直接上下文切换    // 声明上下文切换函数，使用C语言链接规范    // Curr_SP: 指向当前进程栈指针的指针（用于保存当前上下文）    // Next_SP: 下一个要切换进程的栈指针（用于恢复新上下文）    extern &quot;C&quot; void os_context_switcher(stack_item_t** Curr_SP, stack_item_t* Next_SP);#else    // 方案1：通过钩子函数进行上下文切换    // 声明上下文切换钩子函数，使用C语言链接规范    // sp: 当前栈指针    // 返回: 下一个要切换进程的栈指针    extern &quot;C&quot; stack_item_t* os_context_switch_hook(stack_item_t* sp);#endif // 定义系统中进程的总数，包括空闲进程(idle process)    // vortexRT_PROCESS_COUNT是用户配置的进程数，+1是包含系统空闲进程    const uint_fast8_t PROCESS_COUNT = vortexRT_PROCESS_COUNT + 1;        // 定义栈默认填充模式，用于检测栈溢出    // vortexRT_STACK_PATTERN是用户定义的栈填充值    const stack_item_t STACK_DEFAULT_PATTERN = vortexRT_STACK_PATTERN;        // 前向声明TBaseProcess类，因为后续函数声明中需要使用    class TBaseProcess;        // 设置优先级标记(volatile版本)    // 用于在中断服务程序(ISR)中修改进程就绪映射表    // pm: 进程优先级映射表引用    // PrioTag: 要设置的优先级标记    INLINE void set_prio_tag(volatile TProcessMap &amp; pm, const TProcessMap PrioTag) &#123; pm |= PrioTag; &#125;        // 清除优先级标记(volatile版本)    // 用于在中断服务程序(ISR)中修改进程就绪映射表    // pm: 进程优先级映射表引用    // PrioTag: 要清除的优先级标记    INLINE void clr_prio_tag(volatile TProcessMap &amp; pm, const TProcessMap PrioTag) &#123; pm &amp;= ~static_cast&lt;unsigned&gt;(PrioTag); &#125;        // 设置优先级标记(非volatile版本)    // 用于在普通代码中修改进程就绪映射表    // pm: 进程优先级映射表引用    // PrioTag: 要设置的优先级标记    INLINE void set_prio_tag(TProcessMap &amp; pm, const TProcessMap PrioTag) &#123; pm |= PrioTag; &#125;        // 清除优先级标记(非volatile版本)    // 用于在普通代码中修改进程就绪映射表    // pm: 进程优先级映射表引用    // PrioTag: 要清除的优先级标记    INLINE void clr_prio_tag(TProcessMap &amp; pm, const TProcessMap PrioTag) &#123; pm &amp;= ~static_cast&lt;unsigned&gt;(PrioTag); &#125;\n\n整体设计思想\n使用微内核架构：采用精简设计，只保留最核心的调度功能，其他的服务，例如：信号量或者互斥锁等作为外围模块支持，而不包含在这个类内。使这个类更为精简减少flash的占用。\n\n优先级调度：基于优先级的抢占式调度，内核不支持同优先级时间片流转，但是时间片流转会使用插件形式自行决定是否使用。最多支持32个优先级抢占MAX_PROCESS_COUNT\n\n中断管理：通过成员变量ISR_NestCount处理中断嵌套的场景，当ISR_NestCount大于0时禁止调度，最大支持255级中断嵌套。\n\n两种调度：两种上下文切换方案，通过宏开关进行选择。值 0 表示在调度器和操作系统中断服务程序（OS ISRs）中使用直接上下文切换，这是主要的方法。值 1 表示第二种上下文切换方式 —— 通过软件中断实现。根据资料显示Cortex-M 端口仅支持软件中断切换方法。\n\n\n类成员详细说明private:    uint_fast8_t CurProcPriority;          // 当前运行进程的优先级    volatile TProcessMap ReadyProcessMap;  // 就绪进程位图(volatile用于多线程/中断环境)    volatile uint_fast8_t ISR_NestCount;   // 中断嵌套计数器    private:    static TBaseProcess* ProcessTable[PROCESS_COUNT]; // 进程表，按优先级索引        #if vortexRT_CONTEXT_SWITCH_SCHEME == 1    volatile uint_fast8_t SchedProcPriority; // 调度进程优先级(方案1专用)    #endif    #if vortexRT_SYSTEM_TICKS_ENABLE == 1    volatile tick_count_t SysTickCount;     // 系统滴答计数器    #endif\n\n关键方法分析构造函数 \nINLINE TKernel()     : CurProcPriority(MAX_PROCESS_COUNT)  // 初始化为无效优先级表示OS未运行    , ReadyProcessMap((1ull &lt;&lt; PROCESS_COUNT) - 1) // 所有进程初始为就绪状态    , ISR_NestCount(0)  // 无中断嵌套&#123;&#125;\n\n进程管理\n// 注册进程到进程表INLINE static void register_process(TBaseProcess* const p);// 设置进程为就绪状态INLINE void set_process_ready(const uint_fast8_t pr) &#123;     TProcessMap PrioTag = get_prio_tag(pr);     set_prio_tag(ReadyProcessMap, PrioTag); &#125;// 设置进程为非就绪状态  INLINE void set_process_unready(const uint_fast8_t pr) &#123;     TProcessMap PrioTag = get_prio_tag(pr);     clr_prio_tag(ReadyProcessMap, PrioTag); &#125;\n调度器核心\n// 调度器核心实现void sched();// 调度器入口，检查中断嵌套情况INLINE void scheduler() &#123; if(ISR_NestCount) return; else sched(); &#125;// 中断服务例程专用的调度器INLINE void sched_isr();\n系统定时器\n// 系统定时器处理函数INLINE void system_timer();\n\nvortexRT_CONTEXT_SWITCH_SCHEME为1时专用方法介绍\n  #if vortexRT_CONTEXT_SWITCH_SCHEME == 1// 上下文切换完成检查(方案1专用)INLINE bool is_context_switch_done();// 触发上下文切换(方案1专用)INLINE void raise_context_switch() &#123; OS::raise_context_switch(); &#125;#endif\n\n全局单例模式声明。为什么不使用c++的单例模式？\n因为嵌入式系统资源受限制，单例模式在c++的实现会触及到动态内存分配和其他的额外开销对于资源少的单片机可能无法接受。所以直接声明全局变量更加能接受与节省资源。而且单例模式的饿汉模式会让加载时机不够明确带来不确定行，全局变量会在main函数之前进行创建加载，时机明确。在c++中的单例模式使用一个函数进行访问，这增加了程序的执行事件，在内核中会多次调用该实例会造成性能损失。并且内核本就是唯一性的不再需要c++的单例模式来提供唯一实例保障机制\nextern TKernel Kernel;\n\n\n\n设计特点\n高效位图操作：使用位图ReadyProcessMap来管理进程状态，通过位状态来查早最高优先级进程。\nvolatile关键字：关键变量使用该关键字确保多线程&#x2F;中断环境下的正确访问不出现错误。\n通过宏开关支持不同的配置方案更加灵活，适配更多的可能。\n内联函数：简单函数使用内联让编译器对其进行优化，提高执行效率降低性能损失，增加实时性\n\n完整代码链接：vortexRT&#x2F;core&#x2F;os_kernel.h at main · ruixuezhao890&#x2F;vortexRT\n","categories":["嵌入式"],"tags":["rtos","vortexRT"]},{"title":"「破茧计划」vortexRT操作系统开发全周期实录","url":"/2025/04/23/rtos/vortexRT_3/","content":"VX.03 基础进程实现：并行基石依照查询得到的资料可以知道，操作系统可以分为返回独立栈和不返回独立栈，这两种各有优劣，我选择使用宏定义由用户来选择支持哪一种模式。下面我将分别阐述这两种模式的优点与何时使用哪一种模式。\n\n返回独立栈：返回独立栈例如线程栈、任务栈。独立栈的意思是每个任务或者线程都拥有独立的栈空间，用于保存任务执行时的局部变量和函数调用链还有上下文的信息。它切换任务时，内核会修改线程栈指针（PSP，这个指针是硬件定义的指针）切换到新的任务栈空间，确保任务之间的隔离性。避免任务间栈溢出互相干扰，提高系统稳定性。可根据任务需求灵活分配栈大小（例如FreeRTOS中动态分配堆内存作为任务栈） 高效上下文切换：仅需保存当前任务的寄存器状态到其独立栈中，无需处理其他任务的栈数据。 \n非独立返回栈：所有的任务都共享同一栈空间（主栈MSP），任务切换的时候直接在共享栈中保存和恢复上下文。无需切换栈指针，直接通过压栈和出栈来管理上下文，一般用于裸机程序或者简单的调度系统。可以节省内存，不用给每个任务分配独立栈空间，使用资源受限的单片机，但是任务或者中断嵌套调用可能会导致共享栈溢出，破坏其他任务或者系统数据。\n\n由于是第一次写内核，我选择非独立栈来完成这个设计，但是预留独立栈的接口，通过宏定义来进行选择后面了解更加深入之后发现cortex-M其实也是独立堆栈，只不过是自动管理两个对堆栈的自动切换，所以非独立堆栈是为了给cortex类的单片机使用的，独立堆栈使用来给其他不能自动管理堆栈的单片机用的，例如：msp430。\nTBaseProcess的设计思考整体设计思想TBaseProcess是进程&#x2F;任务管理的基类，采用优先级调度机制支持两种栈配置模式（独立与非独立栈）提供进程生命周期管理的方法，以及提供调试信息与性能分析，通过vortexRT_DEBUG_ENABLE来控制开启还是关闭。\n关键数据结构//向前声明两个类，声明变量的时候要用到，后面的篇章会说明功能  class TKernelAgent;  class TService;protected:        // 数据成员        stack_item_t* StackPointer;    // 当前栈指针        volatile timeout_t Timeout;    // 超时计数器(volatile用于多线程/中断环境)        const TPriority Priority;      // 进程优先级(常量)        #if vortexRT_DEBUG_ENABLE == 1        // 调试相关数据成员        TService* volatile WaitingFor; // 当前等待的服务(可能被中断修改)        const stack_item_t* const StackPool; // 栈池起始地址(常量指针)        const size_t StackSize;        // 栈大小(以stack_item_t为单位)        const char* Name;              // 进程名称        #if SEPARATE_RETURN_STACK == 1 //独立栈启用        const stack_item_t* const RStackPool; // 返回栈池起始地址        const size_t RStackSize;       // 返回栈大小        #endif    #endif // vortexRT_DEBUG_ENABLE        #if vortexRT_PROCESS_RESTART_ENABLE == 1   //默认为0        volatile TProcessMap* WaitingProcessMap; // 等待进程映射表(重启功能)    #endif        #if vortexRT_SUSPENDED_PROCESS_ENABLE != 0 //默认取消挂起 ，之后会在TService中实现挂起恢复操作        static TProcessMap SuspendedProcessMap; // 挂起进程映射表(静态成员)依旧使用位操作来确立是否挂起    #endif\n进程管理的方法介绍主要提供以下的管理方法：\n\nsleep() -顾名思义使得进程状态进入休眠，不再被调度；\nwake_up() -看名字依旧知道，唤醒进程；\nforce_wake_up() -强制唤醒进程；\nis_sleeping()-查看进程是不是休眠状态；\nis_suspended() -查看进程是不是被挂起状态；sleep相当与freertos的delay函数的功能，将进程休眠让出cpu的使用权力，超过时间后自动唤醒，也可以在超时之前使用wake_up进行主动唤醒。force_wake_up强制唤醒，不会确认进程是否处于休眠状态，直接唤醒执行。普通的唤醒是线程安全的不会破坏系统的状态，但是强制唤醒可能会重复唤醒同一个进程并且破坏优先级调度逻辑，导致资源竞争。大部分情况下都建议使用wake_up,少数特殊场景使用强制唤醒，例如：系统初始化进程时，从不可恢复的错误的状态下恢复时，看门狗恢复死锁进程时等。\nreset_controls() -重置进程控制状态 通过宏vortexRT_PROCESS_RESTART_ENABLE来确定是否开启该函数的定义，默认是关闭的\n\n栈管理的两种模式\n非独立返回栈// 参数：        // StackPoolEnd - 栈池结束地址(栈顶)        // pr - 进程优先级        // exec - 进程执行函数指针        // (调试模式下可选参数)        // aStackPool - 栈池起始地址(用于调试)        // name - 进程名称(用于调试)        TBaseProcess(stack_item_t* StackPoolEnd,                 TPriority pr,                void (*exec)(),                #if vortexRT_DEBUG_ENABLE == 1                stack_item_t* aStackPool,                const char* name = nullptr                #endif                );\n独立返回栈//    参数：// Stack - 数据栈指针(栈顶地址)// RStack - 返回栈指针(栈顶地址) // exec - 进程执行函数指针// (调试模式下可选参数)// StackPool - 数据栈池起始地址(用于调试)// RStackPool - 返回栈池起始地址(用于调试)        TBaseProcess(stack_item_t* StackPoolEnd,                stack_item_t* RStack,                TPriority pr,                void (*exec)(),                #if vortexRT_DEBUG_ENABLE == 1                stack_item_t* aStackPool,                stack_item_t* aRStackPool,                const char* name = 0                #endif                );\n\n调试的支持说明当调试模式启用时，该类提供 栈的使用情况分析，进程名称标识，和等待服务追踪（WaitingFor 成员变量）\n完整代码链接：vortexRT&#x2F;core&#x2F;os_kernel.h at main · ruixuezhao890&#x2F;vortexRT\n","categories":["嵌入式"],"tags":["rtos","vortexRT"]},{"title":"「破茧计划」vortexRT操作系统开发全周期实录","url":"/2025/04/25/rtos/vortexRT_4/","content":"VX.04 用户进程创建接口实现：多模式创建线程上一篇说到支持不同的栈模式，所以供系统调用的进程类也要支持不同模式下的正确创建，但是在TBaseProcess中实现对不同的栈模式显得繁琐并且不好维护。所以通过宏开关来选择是栈独立还是非独立实现具体进程的实例化，并且通过继承来复用TBaseProcess中封装好的进程通用操作，减少代码的重复性。通过宏在编译期间就确定避免运行时开销。\nprocess用户调用类实现思路由于非独立栈与独立栈的相差不是很多，这里以非独立栈进行讲解，补充一些独立栈的不同之处不再过多赘述。设计想法：通过编译期间来确定进程的特性。例如：优先级，栈大小，初始化状态。所以设计这个类使用模板参数传递必要参数，在编译期间进行计算与确定。  为了避开动态内存分配，毕竟资源不足的单片机上是不足以支持这种使用方法的，所以使用静态数组管理栈空间，避免运行时内存的分配。分层架构设计继承TBaseProcess复用核心功能，并且派生类只用实现exec()函数即可，这就是线程执行函数。\n最后通过typdef来重命名一个空闲进程，通过全局单例实例化来进行实例化。\n非独立返回栈template&lt;TPriority pr, size_t stk_size, TProcessStartState pss = pssRunning&gt;       class process : public TBaseProcess       &#123;       public:           // 构造函数声明(使用INLINE_PROCESS_CTOR宏定义内联)           // 参数：           // name_str - 进程名称字符串指针(调试模式下使用)           INLINE_PROCESS_CTOR process( const char * name_str = nullptr );           // 进程执行函数声明(必须由派生类实现)           // 使用OS_PROCESS宏定义特殊属性           OS_PROCESS static void exec();       #if vortexRT_PROCESS_RESTART_ENABLE == 1           // 进程终止函数(当启用进程重启功能时有效)           // 用于安全终止并重置进程状态           INLINE void terminate();       #endif              private:           // 进程栈空间数组           // 大小根据模板参数stk_size计算(stack_item_t单位)           stack_item_t Stack[stk_size/sizeof(stack_item_t)];       &#125;;       // 进程模板类构造函数实现       template&lt;TPriority pr, size_t stk_size, TProcessStartState pss&gt;       OS::process&lt;pr, stk_size, pss&gt;::process( const char *           #if vortexRT_DEBUG_ENABLE == 1// 调试模式下使用进程名称           name_str           #endif           ) : TBaseProcess(&amp;Stack[stk_size / sizeof(stack_item_t)]// 栈顶地址                            , pr// 进程优先级                            , reinterpret_cast&lt;void (*)()&gt;(exec)// 执行函数指针转换                         #if vortexRT_DEBUG_ENABLE == 1// 调试模式下使用进程名称                            , Stack// 栈起始地址(调试)                            , name_str// 进程名称(调试)                         #endif                            )                  &#123;           #if vortexRT_SUSPENDED_PROCESS_ENABLE != 0           // 如果进程启动状态为挂起(pssSuspended)           if ( pss == pssSuspended )               // 从全局挂起进程映射表中清除当前优先级标记               clr_prio_tag(SuspendedProcessMap, get_prio_tag(pr));           #endif       &#125;       #if vortexRT_PROCESS_RESTART_ENABLE == 1       // 进程终止函数实现       template&lt;TPriority pr, size_t stk_size, TProcessStartState pss&gt;       void OS::process&lt;pr, stk_size, pss&gt;::terminate()       &#123;           TCritSect cs;// 临界区保护(防止中断干扰)           // 重置进程控制状态(清除等待状态等)           reset_controls();           // 重新初始化栈帧(保持原有执行函数)           init_stack_frame( &amp;Stack[stk_size/sizeof(stack_item_t)]                            , reinterpret_cast&lt;void (*)()&gt;(exec)                         #if vortexRT_DEBUG_ENABLE == 1                             , Stack                         #endif                           );       &#125;       #endif // vortexRT_RESTART_ENABLE   // 定义系统空闲进程类型别名   // 使用最低优先级(prIDLE)和预定义的栈大小       typedef OS::process&lt;OS::prIDLE, vortexRT_IDLE_PROCESS_STACK_SIZE&gt; TIdleProc;\n独立栈的版本// 进程模板类定义(双栈版本)// 模板参数：// pr       - 进程优先级(TPriority枚举类型)// stk_size - 数据栈空间大小(字节数)// rstk_size - 返回栈空间大小(字节数)// pss      - 进程启动状态(默认pssRunning运行状态)template&lt;TPriority pr, size_t stk_size, size_t rstk_size, TProcessStartState pss = pssRunning&gt;class process : public TBaseProcess &#123;public:    // 构造函数声明(使用INLINE_PROCESS_CTOR宏定义内联)    // 参数：    // name_str - 进程名称字符串指针(调试模式下使用)    INLINE_PROCESS_CTOR process(const char* name_str = 0);    // 进程执行函数声明(必须由派生类实现)    // 使用OS_PROCESS宏定义特殊属性    OS_PROCESS static void exec();#if vortexRT_PROCESS_RESTART_ENABLE == 1    // 进程终止函数(当启用进程重启功能时有效)    // 用于安全终止并重置进程状态    INLINE void terminate();#endifprivate:    // 进程数据栈空间数组    stack_item_t Stack[stk_size/sizeof(stack_item_t)];    // 进程返回栈空间数组    stack_item_t RStack[rstk_size/sizeof(stack_item_t)];&#125;;// 进程模板类构造函数实现template&lt;TPriority pr, size_t stk_size, size_t rstk_size, TProcessStartState pss&gt;process&lt;pr, stk_size, rstk_size, pss&gt;::process(const char*    #if vortexRT_DEBUG_ENABLE == 1  // 调试模式下使用进程名称    name_str    #endif    ): TBaseProcess(&amp;Stack[stk_size / sizeof(stack_item_t)],  // 数据栈顶地址                   &amp;RStack[rstk_size/sizeof(stack_item_t)],  // 返回栈顶地址                   pr,                                       // 进程优先级                   reinterpret_cast&lt;void (*)()&gt;(exec)         // 执行函数指针转换                #if vortexRT_DEBUG_ENABLE == 1               // 调试模式参数                   , Stack                                   // 数据栈起始地址                   , RStack                                  // 返回栈起始地址                   , name_str                                // 进程名称                #endif                   )&#123;    #if vortexRT_SUSPENDED_PROCESS_ENABLE != 0    // 如果进程启动状态为挂起(pssSuspended)    if (pss == pssSuspended) &#123;        // 从全局挂起进程映射表中清除当前优先级标记        clr_prio_tag(SuspendedProcessMap, get_prio_tag(pr));    &#125;    #endif&#125;#if vortexRT_PROCESS_RESTART_ENABLE == 1// 进程终止函数实现template&lt;TPriority pr, size_t stk_size, size_t rstk_size, TProcessStartState pss&gt;void OS::process&lt;pr, stk_size, rstk_size, pss&gt;::terminate()&#123;    TCritSect cs;  // 临界区保护(防止中断干扰)    // 重置进程控制状态(清除等待状态等)    reset_controls();    // 重新初始化双栈帧(保持原有执行函数)    init_stack_frame(&amp;Stack[stk_size/sizeof(stack_item_t)],                    &amp;RStack[rstk_size/sizeof(stack_item_t)],                    reinterpret_cast&lt;void (*)()&gt;(exec)                #if vortexRT_DEBUG_ENABLE == 1                    , Stack    // 调试模式下传递数据栈起始地址                    , RStack   // 调试模式下传递返回栈起始地址                #endif                    );&#125;#endif// 定义系统空闲进程类型别名(双栈版本)// 使用最低优先级(prIDLE)和预定义的双栈大小typedef OS::process&lt;OS::prIDLE,                    vortexRT_IDLE_PROCESS_DATA_STACK_SIZE,                   vortexRT_IDLE_PROCESS_RETURN_STACK_SIZE&gt; TIdleProc;\n\n最后通过实例化一个空闲进程\nextern TIdleProc IdleProc;\n\n可能有点疑惑为什么进程中是static来声明的exec函数，学过c++的朋友有疑惑，学习c++的时候学习到的明明是静态成员函数是整个类所共有的一个函数，通过类名来进行访问，无需实例化变量访问也可运行。那么这里的进程类为什么能做到每个进程都是各自独立的exec函数呢。其实学习过模板过后就能明白，模板类在进行模板参数传递的时候，其实依据传递的参数编译器会为这个类再生成一份class类，他们每个进程已经不算是同一个类了，所以static声明的exec函数也自然而然独立了，顺利完成线程隔离的任务。权衡代码膨胀与编写便利过后这种设计是可以接受的。\ninit_stack_frame：初始化进程栈函数详解// 初始化任务栈帧// 参数://   Stack - 栈顶指针(高地址)//   exec - 任务入口函数指针//   StackBegin - (调试模式下)栈起始地址(用于栈填充检查)void OS::TBaseProcess::init_stack_frame(stack_item_t* Stack, void (*exec)()#if vortexRT_DEBUG_ENABLE == 1    , stack_item_t* StackBegin#endif)&#123;    // 根据AAPCS规范要求8字节栈对齐    // 将栈指针向下对齐到8字节边界(清除低3位)    StackPointer = (stack_item_t*)((uintptr_t)Stack &amp; 0xFFFFFFF8UL);    // 初始化栈帧内容(模拟中断发生时的自动压栈)    *(--StackPointer) = 0x01000000UL;      // 初始xPSR寄存器值(Thumb状态)    *(--StackPointer) = reinterpret_cast&lt;stack_item_t&gt;(exec); // 任务入口地址(PC)#if (defined __SOFTFP__)    // 无FPU核心(Cortex-M0/M1等)    // 模拟中断自动保存的寄存器: LR,R12,R3,R2,R1,R0,R11-R4 (共14个寄存器)    StackPointer -= 14;                     #else                       // 有FPU核心(Cortex-M3/M4等)    // 模拟中断自动保存的基本寄存器: LR,R12,R3,R2,R1,R0 (共6个)    StackPointer -= 6;                          *(--StackPointer) = 0xFFFFFFFDUL;      //这个寄存器设置的是返回模式                                           // exc_return值:                                            // - 返回Thread模式                                           // - 不使用FPU上下文                                           // - 使用PSP作为栈指针    StackPointer -= 8;                      // 模拟保存R4-R11寄存器#endif#if vortexRT_DEBUG_ENABLE == 1    // 调试相关处理    *(StackPointer) = reinterpret_cast&lt;stack_item_t&gt;(&amp;DebugInfo); // 强制保留DebugInfo引用    // 用预设模式填充整个栈空间(用于栈溢出检测)    for (stack_item_t* pDst = StackBegin; pDst &lt; StackPointer; pDst++)        *pDst = STACK_DEFAULT_PATTERN;     // 默认使用0xABBA(见vortexRT_STACK_PATTERN定义 os_target.h)#endif&#125;\n任务栈被初始化之后的堆栈布局\n\n为什么需要初始化内存布局？\n\n可以使用上班来类比，我们给一个新员工（进程）安排工位（内存），我们不仅仅要给他桌子（堆栈空间），还要再桌上摆好工作手册（寄存器状态）；电脑开机密码（程序入口）和紧急联系方式（异常返回机制）。\n\n为什么要对齐呢？\n\nArm架构要求栈指针必须八字节对齐，目的是为了性能优化和硬件兼容性。相当于使用空间换时间。举个例：原始栈指针是0x20010003对齐就会抹掉最后的3变成0x20010000。\n\n具体操作分析如下：\n\n首先我们进行八字节对齐之后，模拟硬件的异常压栈，初始化的时候是手动模拟压栈，在运行的时候这一部分是硬件自动完成。第一个寄存器是xPSR寄存器作用是标记CPU状态，我们将其24位初始化为0x01000000UL是为了告诉CPU这是一个“Thumb状态”下的任务。下一个寄存器是R15寄存器，根据arm内核手册知道这是一个pc指针寄存器，所以初始化时我们将进程函数的地址放在这里，让任务醒来的时候在进程函数处运行。之后就是判断是否使用了FPU，如果没有直接往低地址走14个地址，预留出LR,R12,R3-R0,R11-R4的空间，另一种情况就是使用FPU此时先往低地址走6个地址后，第七个低地址时是 EXC_RETURN标记，这里被赋值0xFFFFFFFD： 这是CPU的“暗号”，意思是：“返回线程模式”（普通任务模式）用PSP不要用MSP”（任务用进程栈，内核用主栈），别管FPU寄存器”（节省时间，后面手动处理）就像给CPU贴了张便利贴：“醒来后按这个流程走”。最后如果开启调试模式的话就将后面的空闲堆栈填充为’STACK_DEFAULT_PATTERN’，这里的操作方法和’rtthread’一致。定期扫描模式是否被破坏，在任务调度钩子或空闲任务。\n\n\n\n地址\n值\n意义\n\n\n\n0x200101FC\n0x01000000\nxPSR（CPU状态）\n\n\n0x200101F8\n0x08001234\nPC（任务入口）\n\n\n0x200101F4\n未初始化\nLR（会被EXC_RETURN覆盖）\n\n\n0x200101F0\n未初始化\nR12\n\n\n…\n…\nR3-R0\n\n\n0x200101DC\n0xFFFFFFFD\nEXC_RETURN（魔法值）\n\n\n0x200101D8\n未初始化\nR4\n\n\n…\n…\nR5-R11\n\n\n0x200101B8\n栈顶\n从这里开始动态使用\n\n\n完整代码链接：vortexRT&#x2F;core&#x2F;os_kernel.h at main · ruixuezhao890&#x2F;vortexRT\n","categories":["嵌入式"],"tags":["rtos","vortexRT"]},{"title":"「破茧计划」vortexRT操作系统开发全周期实录","url":"/2025/04/28/rtos/vortexRT_5/","content":"VX.05 内核代理模式：安全的赋予内核能力TKernelAgent类是内核代理类同时一个工具类，其中的所有方法都是static，主要的功能便是提供对内核关键功能的受控访问接口。封装了内核的核心功能，通过静态方法的方式给其他组件提供内核能力，保证内核内部数据不被直接访问，提高封装性防止被意外更改内核数据。通过protect继承限制只有内核相关的类才能使用这些功能。这个类主要就是为了其他组件能够调用内核服务，又能保持内核内部的实现封装性。\nclass TKernelAgent&#123;    // 获取当前运行进程对象指针    // 通过查询内核的进程表(ProcessTable)获取    INLINE static TBaseProcess * cur_proc() &#123; return Kernel.ProcessTable[cur_proc_priority()]; &#125;protected:    // 构造函数设为protected，限制只有派生类可以实例化    TKernelAgent() &#123; &#125;        // 获取当前运行进程的优先级(只读引用)    INLINE static uint_fast8_t const &amp; cur_proc_priority() &#123; return Kernel.CurProcPriority; &#125;        // 获取就绪进程位图(volatile引用，可能被中断修改)    INLINE static volatile TProcessMap &amp; ready_process_map() &#123; return Kernel.ReadyProcessMap; &#125;        // 获取当前进程的超时计数器(volatile引用)    INLINE static volatile timeout_t &amp; cur_proc_timeout() &#123; return cur_proc()-&gt;Timeout; &#125;        // 触发内核重新调度    INLINE static void reschedule() &#123; Kernel.scheduler(); &#125;    // 设置指定优先级进程为就绪状态    INLINE static void set_process_ready(const uint_fast8_t pr) &#123; Kernel.set_process_ready(pr); &#125;        // 设置指定优先级进程为非就绪状态      INLINE static void set_process_unready(const uint_fast8_t pr) &#123; Kernel.set_process_unready(pr); &#125;#if vortexRT_DEBUG_ENABLE == 1    // 调试模式下获取当前进程等待的服务对象    INLINE static TService * volatile &amp; cur_proc_waiting_for() &#123; return cur_proc()-&gt;WaitingFor; &#125;#endif#if vortexRT_PROCESS_RESTART_ENABLE == 1    // 进程重启功能启用时，获取当前进程的等待映射表    INLINE static volatile TProcessMap * &amp; cur_proc_waiting_map() &#123; return cur_proc()-&gt;WaitingProcessMap; &#125;#endif&#125;;","categories":["嵌入式"],"tags":["rtos","vortexRT"]},{"title":"「破茧计划」vortexRT操作系统开发全周期实录","url":"/2025/04/28/rtos/vortexRT_6/","content":"VX.06 系统对外接口现在实现最后的系统对外调用的函数接口，内核文件的设计就已经结束了，下一个篇章实现freeRTOS中的port文件，也就是对于不同的芯片架构和编译器实现不同的接口文件，这才是实现任务调度的关键文件，没有它则无法实现任务调度。\n对外调用接口这一节没啥好说的就是对之前的函数进行了一次封装，直接看代码中的注释能完全理解，不再赘述\n    // 系统运行函数（永不返回）    INLINE NORETURN void run();        // 检查操作系统是否正在运行    INLINE bool os_running();        // 锁定系统定时器（临界区保护）    INLINE void lock_system_timer()    &#123; TCritSect cs; LOCK_SYSTEM_TIMER();   &#125;        // 解锁系统定时器（临界区保护）      INLINE void unlock_system_timer()  &#123; TCritSect cs; UNLOCK_SYSTEM_TIMER(); &#125;        // 进程休眠函数（默认参数0表示无限期休眠）    INLINE void sleep(timeout_t t = 0) &#123; TBaseProcess::sleep(t); &#125;        // 根据优先级获取进程控制块指针    INLINE const TBaseProcess * get_proc(uint_fast8_t Prio) &#123; return Kernel.ProcessTable[Prio]; &#125;        //--------------------------------------------------------------------------#if vortexRT_SYSTEM_TICKS_ENABLE == 1#if vortexRT_SYSTEM_TICKS_ATOMIC == 1    // 原子方式获取系统滴答计数（无锁版本）    INLINE tick_count_t get_tick_count() &#123; return Kernel.SysTickCount; &#125;#else    // 获取系统滴答计数（带临界区保护）    INLINE tick_count_t get_tick_count() &#123; TCritSect cs; return Kernel.SysTickCount; &#125;#endif#endif // vortexRT_SYSTEM_TICKS_ENABLE#if vortexRT_TARGET_IDLE_HOOK_ENABLE == 1    // 目标平台特定的空闲进程钩子函数    void idle_process_target_hook();#endif // vortexRT_TARGET_IDLE_HOOK_ENABLE#if vortexRT_SYSTIMER_HOOK_ENABLE == 1    // 系统定时器钩子函数（必须启用才能使用时间片轮转）    INLINE_SYS_TIMER_HOOK void system_timer_user_hook();#endif // vortexRT_SYSTIMER_HOOK_ENABLE#if vortexRT_CONTEXT_SWITCH_USER_HOOK_ENABLE == 1    // 上下文切换用户钩子函数（用于自定义上下文切换逻辑）    INLINE_CONTEXT_SWITCH_HOOK void context_switch_user_hook();#endif // vortexRT_CONTEXT_SWITCH_USER_HOOK_ENABLE#if vortexRT_IDLE_HOOK_ENABLE == 1    // 空闲进程用户钩子函数（用于自定义空闲任务处理）    void idle_process_user_hook();#endif // vortexRT_IDLE_HOOK_ENABLE\n\n函数具体实现再GitHub仓库：https://github.com/ruixuezhao890/vortexRT函数实现带有注释\n","categories":["嵌入式"],"tags":["rtos","vortexRT"]},{"title":"「破茧计划」vortexRT操作系统开发全周期实录","url":"/2025/05/02/rtos/vortexRT_7/","content":"VX.07 target平台函数设计：cortex—gcc平台为例在嵌入式系统开发中，不同处理器架构需要特定的工具链支持文件（包括启动代码、链接脚本、外设寄存器定义等）来实现硬件抽象层的适配。以ARM Cortex-M系列为例，虽然M0&#x2F;M0+&#x2F;M1&#x2F;M3&#x2F;M4&#x2F;M7内核采用统一的Thumb&#x2F;Thumb-2指令集架构，但各子系列在指令集扩展（如M4的DSP指令和可选FPU）、中断控制器（NVIC）配置、内存保护单元（MPU）等方面存在差异。本文基于Cortex-M4硬件平台，通过条件编译和架构抽象层设计，实现了一套兼容Cortex-M0(+)&#x2F;M1&#x2F;M3&#x2F;M4(F)的GCC工具链接口文件，其核心是通过预定义宏（如__ARM_ARCH_6M__&#x2F;7M__）自动识别处理器特性，并动态调整内存布局、中断向量表对齐方式（M0要求8字节对齐而M3&#x2F;M4支持32字节）以及浮点运算调用约定（softfp&#x2F;hard）。\n编译器和目标检查确保编译器是使用GUN编译器并且支持对应芯片的代码编译还要保证编译器的版本足够\n#ifndef __GNUC__#error &quot;This file should only be compiled with GNU C++ Compiler&quot;#endif // __GNUC__#if (!defined __ARM_ARCH_7M__) &amp;&amp; (!defined __ARM_ARCH_7EM__) &amp;&amp; (!defined __ARM_ARCH_6M__)#error &quot;This file must be compiled for ARMv6-M (Cortex-M0(+)), ARMv7-M (Cortex-M3) and ARMv7E-M (Cortex-M4(F)) processors only.&quot;#endif#if (__GNUC__ &lt; 3)#error &quot;This file must be compiled by GCC C/C++ Compiler v3.0 or higher.&quot;#endif\n编译器特定的属性支持通过共定义来确保一些关键字在不同平台下也能正常使用。例如inline\n#ifndef INLINE#define INLINE      __attribute__((__always_inline__)) inline#endif#ifndef NOINLINE#define NOINLINE    __attribute__((__noinline__))#endif#ifndef NORETURN#define NORETURN    __attribute__((__noreturn__))#endiftypedef uint32_t stack_item_t;typedef uint32_t status_reg_t;\nstack_item_t 和 status_reg_t 被定义为 uint32_t 类型，这是为了与ARM Cortex-M架构的32位特性完美匹配。这种设计确保了栈操作的高效性和中断状态处理的精确性，同时保持了代码在不同Cortex-M系列处理器间的可移植性。\n#define OS_PROCESS __attribute__((__noreturn__))#define OS_INTERRUPT extern &quot;C&quot;#define DUMMY_INSTR() __asm__ __volatile__ (&quot;nop&quot;)#define INLINE_PROCESS_CTOR INLINE#define SEPARATE_RETURN_STACK   0#define vortexRT_ISRW_TYPE       TISRW\nOS_PROCESS 标记进程函数永不返回（优化编译器行为）， OS_INTERRUPT 确保中断处理函数使用C语言链接规范（避免C++名称修饰）， DUMMY_INSTR() 提供精确的CPU空操作指令（用于时序控制和同步），而 INLINE_PROCESS_CTOR 则强制进程构造函数内联（提升创建性能）。SEPARATE_RETURN_STACK选择使用非独立栈。vortexRT_ISRW_TYPE用于指定中断服务例程(ISR)的包装器类型。TISRW是一个中断服务历程的包装器，可以实现中断进入时自动增加嵌套计数器和退出时自动检查嵌套技术并触发任务调度，后文会详细说明。\n#define  vortexRT_CONTEXT_SWITCH_SCHEME 1#if (defined __ARM_ARCH_6M__)#define  vortexRT_PRIORITY_ORDER             0#else#define  vortexRT_PRIORITY_ORDER             1#endif\nvortexRT_CONTEXT_SWITCH_SCHEME 这个宏定义指定了vortexRT操作系统在Cortex-M架构下使用软件中断方式进行上下文切换。对于Cortex-M0&#x2F;M0+(ARMv6-M架构)处理器，使用升序优先级(值为0),因为M0系列缺少CLZ(Count Leading Zeros)指令,需要通过查表方式实现优先级查找。对于Cortex-M3&#x2F;M4(ARMv7-M架构)处理器，使用降序优先级(值为1)，可以利用M3&#x2F;M4的CLZ指令高效实现优先级查找，降序排列能获得更好的性能表现。这样设计考虑了两种芯片架构的指令集之间的差异，并且优化系统性能。\n#include &quot;vortexRT_CONFIG.h&quot;#include &quot;vortexRT_TARGET_CFG.h&quot;#include &lt;vortexRT_defs.h&gt;#ifdef vortexRT_USER_DEFINED_STACK_PATTERN#define vortexRT_STACK_PATTERN vortexRT_USER_DEFINED_STACK_PATTERN#else#define vortexRT_STACK_PATTERN 0xABBA#endif\n定义了一个宏 vortexRT_STACK_PATTERN，表示栈内存初始化时的填充值。优先级如下： 如果用户通过 vortexRT_USER_DEFINED_STACK_PATTERN 自定义了值，则优先使用用户的值。如果用户未定义，则使用默认值 0xABBA。\n#define enable_interrupts() __asm__ __volatile__ (&quot;cpsie i&quot;)#define disable_interrupts() __asm__ __volatile__ (&quot;cpsid i&quot;)\n通过正点原子的权威指南得知,上面的两条汇编的功能是开启和关闭中断,也就是使能中断屏蔽器和失能.\n// 设置中断状态（PRIMASK寄存器）// 参数：status - 要设置的状态值（0启用中断，1禁用中断）INLINE void set_interrupt_state(status_reg_t status)&#123;    __asm__ __volatile__ (        &quot;MSR PRIMASK, %0\\n&quot;  // 内联汇编：将参数值写入PRIMASK寄存器        : : &quot;r&quot;(status)      // 输入操作数：将status变量放入通用寄存器        :&quot;memory&quot;            // 破坏描述：指示内存可能被修改    );&#125;// 获取当前中断状态（PRIMASK寄存器值）// 返回值：当前中断状态（0表示中断启用，1表示中断禁用）INLINE status_reg_t get_interrupt_state()&#123;    status_reg_t sr;    __asm__ __volatile__ (        &quot;MRS %0, PRIMASK&quot;    // 内联汇编：读取PRIMASK寄存器值        : &quot;=r&quot;(sr)           // 输出操作数：将结果存入sr变量    );    return sr;&#125;\n临界区包装器#if vortexRT_USER_DEFINED_CRITSECT_ENABLE == 0class TCritSect&#123;public:    INLINE TCritSect () : StatusReg(get_interrupt_state()) &#123; disable_interrupts(); &#125;    INLINE ~TCritSect() &#123; set_interrupt_state(StatusReg); &#125;private:    status_reg_t StatusReg;&#125;;#endif\n通过TCritSect进行临界区包装,为什么需要这种设计呢?其实是为了使用c++的RAII的特性,在类被创建时则自动调用构造函数,构造函数中调用关闭中断,销毁时调用析构函数,然后开启中断.这么设计的好处便是只要创建这个类,那么就会自动进入临界区和退出临界区,不会出现入后忘记退出.\nINLINE OS::TProcessMap get_prio_tag(const uint_fast8_t pr) &#123; return static_cast&lt;OS::TProcessMap&gt; (1 &lt;&lt; pr); &#125;#if vortexRT_PRIORITY_ORDER == 0    INLINE uint_fast8_t highest_priority(TProcessMap pm)    &#123;        extern TPriority const PriorityTable[];        #if vortexRT_PROCESS_COUNT &lt; 6            return PriorityTable[pm];        #else            uint32_t x = pm;            x = x &amp; -x;                             // Isolate rightmost 1-bit.                                                // x = x * 0x450FBAF            x = (x &lt;&lt; 4) | x;                       // x = x*17.            x = (x &lt;&lt; 6) | x;                       // x = x*65.            x = (x &lt;&lt; 16) - x;                      // x = x*65535.            return PriorityTable[x &gt;&gt; 26];        #endif  // vortexRT_PROCESS_COUNT &lt; 6    &#125;#else    INLINE uint_fast8_t highest_priority(TProcessMap pm)    &#123;        return 31 - __builtin_clz(pm);    &#125;#endif // vortexRT_PRIORITY_ORDER\n get_prio_tag将数字优先级转换为位掩码形式,供调度器快速进行优先级比较和查找与 highest_priority 函数配合实现高效调度.highest_priority 函数根据不同的处理器架构有两种实现方式：对于Cortex-M0等不支持CLZ指令的处理器，使用查表法结合巧妙的位操作来找到最高优先级,对于Cortex-M3&#x2F;M4等支持CLZ指令的处理器，直接使用31 - __builtin_clz(pm)这个高效的内建函数,在freertos中也能看到这样的写法.这种设计充分考虑了不同ARM架构的特性差异，在保证功能的同时最大化性能，是嵌入式RTOS优先级调度算法的经典实现。\n#if vortexRT_CONTEXT_SWITCH_SCHEME == 1// 触发PendSV异常以请求上下文切换// 直接操作NVIC中断控制状态寄存器(0xE000ED04)// 设置PENDSVSET位(第28位)来触发PendSV异常INLINE void raise_context_switch() &#123;     *((volatile uint32_t*)0xE000ED04) = 0x10000000;  // 0x10000000 = 1&lt;&lt;28&#125;// 启用嵌套中断的宏(空实现，默认已启用)#define ENABLE_NESTED_INTERRUPTS()// 根据配置决定是否禁用嵌套中断#if vortexRT_SYSTIMER_NEST_INTS_ENABLE == 0    // 通过临界区保护禁用嵌套中断    #define DISABLE_NESTED_INTERRUPTS() TCritSect cs#else    // 空实现，保持嵌套中断启用    #define DISABLE_NESTED_INTERRUPTS()#endif// 架构兼容性检查#else#error &quot;Cortex-M3 port supports software interrupt switch method only!&quot;#endif// 中断服务例程(ISR)包装器类// 用于管理中断嵌套计数和调度class TISRW&#123;public:    // 构造函数：进入ISR时自动调用    INLINE  TISRW()  &#123; ISR_Enter(); &#125;    // 析构函数：退出ISR时自动调用      INLINE  ~TISRW() &#123; ISR_Exit();  &#125;private:    //-----------------------------------------------------    // ISR进入处理    INLINE void ISR_Enter()    &#123;        TCritSect cs;  // 进入临界区保护        Kernel.ISR_NestCount++;  // 增加中断嵌套计数    &#125;    //-----------------------------------------------------    // ISR退出处理    INLINE void ISR_Exit()    &#123;        TCritSect cs;  // 进入临界区保护        if(--Kernel.ISR_NestCount) return;  // 减少嵌套计数，若非最外层中断则直接返回        Kernel.sched_isr();  // 最外层中断退出时触发调度    &#125;    //-----------------------------------------------------&#125;;// 定义TISRW_SS为TISRW的别名，保持向后兼容#define TISRW_SS    TISRW/* * 系统定时器中断处理函数 * 功能：处理系统定时器中断，更新内核计时并触发调度 */INLINE void system_timer_isr()&#123;    OS::TISRW ISR;  // 创建ISR包装器实例，自动管理嵌套计数#if vortexRT_SYSTIMER_NEST_INTS_ENABLE == 0    DISABLE_NESTED_INTERRUPTS();  // 根据配置禁用嵌套中断#endif#if vortexRT_SYSTIMER_HOOK_ENABLE == 1    system_timer_user_hook();  // 如果启用，调用用户定义的钩子函数#endif    Kernel.system_timer();  // 调用内核系统定时器处理&#125;\n函数具体实现再GitHub仓库：https://github.com/ruixuezhao890/vortexRT函数实现带有注释\n","categories":["嵌入式"],"tags":["rtos","vortexRT"]},{"title":"「破茧计划」vortexRT操作系统开发全周期实录","url":"/2025/05/18/rtos/vortexRT_8/","content":"","categories":["嵌入式"],"tags":["rtos","vortexRT"]},{"title":"联通日记—1","url":"/2025/07/27/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%941/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f244429651323595285a77da6ddd9a0cc228c359f240084bd24f14144475e90cfd4f6ec010da52e0c8ba150c1e41e9d1fe6e2aeb0e8ff0a2545a81f888711653487ec53de0da7e5c67a36d390d71f4ea3123a14d5ff8b5d9afc220f638faa2303bca28d5a29cea7844393912d4baf78e12493ea951227a35b8fc8cf00ab4b3c45b54faf78078efda8989e3902921a69f1d7637f161894486e95eda4a3133e1e2287f5b7a34379d53ee2c066b6ba5ba8b8db2ad1efa5f520df87b27bb413bb11caa735b2a4ad0380177b0be959eb925c95ed3ad78be1ac265696391ca915727936573f11417495717fe337d6c61cc3223b2ca79e21815a6814912ccbd8732f2219752b9891a8912df6aae863057889ceb07d0cc8633bfa6d206f33a0358c34a40b88deed63139c1a239a449ac559710d0e25191f7dd8ee11f7c26bf416dcbf9a88e42dc622280052fb46c56cf11414f882ec459d4a8441e07a399e581b9500bf2fd7ea5271bb196c60c62af2f648c4af0b5559b97dd17d9c66706c595180d8f9a7a3d14f5570c84ad0c4fc54a0fdc0159645e9783020fbeb7a2d223b2a0cb8f7546df57db65be23c9e2a4c1a035cf2fee61e033a5b8d6f46881a2047180a8438955b56facd880f6227b945c733f23fd915c637a58cba359fbce4a6fa54d383ec0cab15cc388608ae5a1e74096a234b4205b266c1f6e9d1882cd7e85bb6c570cd243820ec3e9c94a0b53c04b38273400b5a53f3435e28b9f4c646011227f105a958cf4e84f04d916c33b7c2a8f70a83b352d95390c2321c057da82b692b7748580b1e15e4bce94e2e77c92d840b90792be35b033e53158cea53de355c88eff072a89f54800ee9faf9e9e1591078ac8785eab47e921e3d0574ee4e1f4c795153c6bf079858f75dafd7aae5bcaafd0b47f9ebc9072c31b15e63a4beb7e6db27aed2c6fa28f0e7c6bad5e9d81efcee580abae35a51fe3b2d6e71ae8035704f9ef5e92cf6b63452dd4e0a22f59bf521a66ff0543a98d9cb751453d9a7f8379e038ad2ce913a7022355607706f3db97472c886f3ba97f96480ea4fc231c6a3019b5f0559a108cccfbcff0725b453f88d84f1486f158a727ea2abd5387c444226b58a3c7d5f167bb31493ae9e9023e75c4b7b4e9b5385f85cfce34a8cffba317bd0346bde2d4abc3e9334f5dde03ba98d28fcc4f89fc25d9b9568171ef990909bb24aa7d7cc164ce52c6c852a14468807f017ea270c1f6d4cb647617ea7e5ada78b292f0fe83ba98ccff6d7549b7b587c5f8ecd7bec421ced575db6b37a75780f37459a86bdac2745c1692a37c9ae8de35795717f3b5e738bf57bce1396abea0dee09c3436506686facffba71dc8ea3bd12773ebcf6857ac91018eb4e8c67dc59fe052052d45b156329c2549c1fd71c97f9bd356f61fddbe0b49708c84d6f3cc02c8a007e5d3d6fb566b144d9f25d09ff682889c9d49c95da84e49afaf7bd254d3b73dde26385a5aa7bb5a4e646e77e042f484a32ae27b74246a0bed15b6d3c604395c7d24defc29322989e91eb88a425b51f2b3ae9f131ea7ee2798723ecadeebfbb7b9c089301d96f9689a267fa2a85de50149fcdc224879732ca6fa9c8a648f8e238693fa3befaf611dcd39004af18d83639f351ccd887b3d677d3ae7ad7d9c0ac6c65358ab2db7dc1c40790acc0b256a5ad162036752a495dab03e624cbd4c8528282529fe33b0ad724b18b59f5c5b8fffa76f9680a0b34907a57a4d781cb8b2742a40035bee4d299241850acd984b6e9b0572f2b612798266444646fe79fead7c0dfeefa01599bf7f56df1dae88948813f0f440aa72199e5f97d126319713c5b248cb0a94910b6b9f46558fca00246b56fdcc42f1bc60285777240d29bb6f0d41b05a7d811bbbacc8c7cb60c890989ed45a00d8072b362df285864c2cb634b5cf95cc75be8a67b067ec26812ca645b23b19bea6923e7f13bf5ab5cb9238825ea84db27ad27fc0f4eb39f4214810b96770d76d66eb36f045084bb52ebf36bcc8be8475349c0152cdd2184cd3422f79646148794340c4979eae307c76db467991f3b8cfa3613202f8d04e394ee8e5a626c330f72ebd94915fc325f74a75f3f5a986c4f0d364d2869e50b87d31b7c23ccd10cfd6140056271b7b2725677bbc090f9c4826d80c9b87d5f9d82ffaea9f0d66389009d08479af0de7135af6c350baa67e99116115c7c20beb492c1919a0513b469c50105ddf9d7b7df4e775065f5ff73c387250cfbe1fad12fe17d9df681853429118b63065a892e701a597c5f335951b236e805344a6aeb1068895cf2a9e58af197eb70d65191950c2634dcd2b25472b689bbe082f3c63571020d4a2e5392408fd198f3b9f98035ac4b90cbc6ac7cb7b8ce6815d7fbeeb0478dbf55404ce1eb9b6c6721816e34b4ec407cbf2cf1ae667f3250f3ba7b77fd61e5717bd19fe42c404de3309864c14949a2a803297ab243399193f7c98a5bf53cb84cd72b0d072585fa38f5f9d3997ae2de3309d3fc67f90f4d4a75484d9e2d1894d302447a76f2f1db5dff07b2315b62a39c2e3af71f6a71882e0bc3497dd40e71cf3656187db9c2f8de71042c7154c1701d823e283b9b432f2c9e726a8f9dcd6cb68f1723f8a883039726d710e02b0c60c3e59cdc0b5e1e1fc3d82a330a2d2b38e446a76a52ff020f9a015ded10bb0ab05333f8455826e748ec6e8501a7aa3f097332f806f8d4a129de118080092849849ecccf03ea0c9ef1d4a1eb1cb4ef645de8cecebae38c2fcd03aff53029406a589a0fef1f0e1e3ceff27c978dabfa605652c400694b546f785c500394d437bdc9f6c3d6d408ee9eb3d378291d07272c95c1e5870a8ff1e94b7e5cc1a1b5a2355698d63c90576da888f6db3815c0f39b806da448e4318b7d0f2eec64f31790e4219e12940bd564d8cd3316e7aeb40a3d74283dfd7a70747473f1a7b101d036671d29a79b81437795ef3b7f22e4a51301576c6106cc71a091715d60cf38c77b369e6d5139280eda1421744970ff64b0ee9ddd736c30c734cad1b9d2c20398d6ede871a0c908e2db68c0160a4009b2bacf4b2f5cec193a0a7439ce25e23771bee0df55195389cfec047e54c5edf04fc8b8ae1670b9b3b44364647b2b6c1afd6aa3b42cc1a676b174d058feb16408b9104690049c5f627f2637dda9a4bb789e7b0ac3694762bd31a80eda10200af37c15f021cec2b2c0c41e5f0b800f48af6e5198befc11a9ce87a31515933b7dddeb7ec3a0ead683a34f32401cf22448ec3827009e7312a6547bc7fc77c52eae063f9969135e380d690d6bf7f9e4d6de85abac451d0e0fe37174654aa31afe54c8717ebcbb2e9384bc5355ddc02e8ce1b7ce593404b73c065e5ba7a0e35ad8d4a8cdd439967a37dee44f2407f80605dcec6e43c0bc822527b6ee67c9ad3b1db28c185cb83a53f1b7d3a7ac1dc42d2d11860063398c962e298dc3e61d0716d968433f70103c7acbffdaa9d0a8de7679a9f7a854d5c2a0c6334234402a2ad922e05f9b04c3f0c2bfc0468b2b0b6ddb970da04d24e20527eee5efa296cc40bf965ad1c96dd5f436091e56163045631c810d00a86d6e4025229f3e2beda3913352df12f7f2fd3f3c49c658367cc893ccbe36442719cb54c4245d03393c9e117bf850f5348f2298818d0a1a4461f842e7574b700071f18d46d3bb8fb5a5567a777f0e9cf5c8032d9335de836085231dba9ce19a6b728900d8435b9f95b0edf2c6c04876b4d06f13441f8fc6b2631abe96e66b74e6f60c2cb079f7f803350011be57f7b1cd0642f7937da2a83b623325ac16f34be739375eaca7a0b64bebbe458a213e8b36688f7de3420a6fa8aa1e5a2b3c5bac8c6fbf6271b7bb0a83bd2f0611141d0e284c76918ef6d3d14a29977d42d62deba52fb331a4ff7bbca39d1c65d2cac17834319eb4d439f58f0a475fc68951c8474b6ab1fbe82a6ff4fce5ee2b5caef4b9572981e31dfa38239f94e2c51fcd251ad0e2522aa0980bf09ea9f104a84f8c3535071a51b7d08070b81698c85bab2631071374be152360c3b1ba8fc545f7ab295832f21124d84c44b79265f455d4fc14cf1bbe18f9084d62354af4030758727ca9286927d574460abe95ccdace5c71986b1586039433040267f4614000f980db795347bce5a1eefbf5174a093ae91e30e788fae6ff91c505fe4bb9c1d7eaae53bee091377624e25b4d658f72cac07f150a58165414e47c925d7386bf48a9d981adda1087031ac52f5852627405bd6d7016b9ce61087c8864243b605754ca96476286aa06c038cd2b39216122f219346b9279e92d5963f97519812a6f2f06d427a29f968745ee32129b63efbc9d79d8ccf44016019e661efdd057ee53c579ae734fd5ad4d23bcdb5506b260be7a9b23b\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]},{"title":"联通日记——2","url":"/2025/07/28/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%942/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f244429611a7dee2cd5051d3d7a0332a8aaad3276f23bf2d8b11fed88d1d04c09c74a0a615435c31e4e4c92b9ed1af86e2ca1f1109c2253ec231b0b17218bee9fa97faa48fa5bfc34692b2041e8d48468df9b06cf7e169ee0b9de0613df2966bed9847d16746594b8490a976aa15670d367264fddb1afbb1ce75e8e1e3aada3f50de0e7d0dbd001843afc4a742accb128ae0e068ff5022c98ccdd633add863207b29ba811efef076b9f038c7ee89302ebfc4c67e147774de94faf9c884fc59e05267f9c07b516433910500b04e50ec253cabe6e9b27f8496362effe271509f4f9cb3fe19a5d191971ecf9017aac333498e2a427b8b33cd788d76274da715d1e3c60631ce014f2aa492b4dfe1ab90a9c6c063a59ac460f091a3a803999f8b088715220443e070bcfe7be340b1f68d3749e824ee42d8f0654d17a88c21e1ed1082fb9f01e79d0d149cb95615a3053be0a9ca0179e8394e9c14adc7cab764457d6fd1fe6f57db742b7c9ca8ff4b113846876f2123e90478b0a8038b6e5fd81badfb91308c99cf59bd82f7df6c2e0e21e2ebad746fd23a388010dace19144afca33bdf15e449021ff49439a449541453247f709fe5902362b2f9620345d0a263e9f259b99d3aa9b5368331c99c65db40514c48c462c7be89757576d801c866e7031954d5ae110e995390c0068432a31a075526080bc10ebdd52a6d1aa39f5fe73b2c6b80bf43fb894a016572e8a6c8ad5342334a2d904759e9de96c15bbd5cd603ba9b8962cfbdfd17e3b1719ff9423d2b96d78b50032e24392f746203384a532137b7303222b7f9b98c7172c60a673e1edb89b6d0c40f43798fa7ba2c08cc880ef766b85c3b494ed8ec188aa009e781ed2bfda8c373542425da2ec4872258890003992bc2e9d53ea20281c3be615ef1eeee24a45aab0bc5a68b171464d00d56a0ca1276896c5176919cdca090537e4e801f2749c6f5ce0a03540681bf61dacb4b838eea7d7b881957e86e527ed8752c660421d92d50ef11786743773430d1e37f1a13576b58ff3316c07938de8524d2e2a678c1fb7fbf9acbf70208fb54f3abf7c5f62e80107d49584b16a345a38db04e1fc0c93cbdf329358207eb03908b63cbadd1f392a89d26808434de8a6b576aad97198e7f21140673e93ad826616d8bdffa65b620ff08aa88732c162ee3a14f057343560942f2d8c69d43bafd0795b3b510162370b3843859853d161240eabe6b1ec30e23d13f1ac92d7bea072f4a0685a4d2a992757dbade41c7df8a2ebd92cbab0e27ddc526507d031d42daa93350ad6cb85e8a37f6e135739bea918cc171d6b36cd8f3f1e5595f1193c1088d16245ca7b1ba5d8810f0236447b6cfc6438a6874e2105e962edc3d83464247b30314a43df197fe86dc02934cd5336ba3af6d505dd1475edff6db3d916ef4fe664bc7de2dec2dc60f9cbd9d106f68d4e28ea3ea0576ba2e36c3524752c23ffdb42ecbf145752d8a08e9f3cb6f4e6a6911cb537f5195557fd16b5e6cea807fc24d237cf0bada1763231e49b4795caa8ed51fcb50b97a4d15fa981be03d264c4769b04f25dd6a95d08441a42ad4a52decd50a73d6f1acf5233cdcc75ee3dba4ae35d91afc95cd69e1ab9403f3a1be02e73b8ff8d8750fc71ec5d94620aebdbdfdfc2e64e58d43bad2bd5c486c56eba893001f0e73e17c4311b6652e873d4b751c0ed953a93c43987642d67b58031e79a15e27cb0dbd703c3c40f7c2ea8265d47175aeaac747866c0ba78d5d15852b8421253da263688e26bed3465104b03c47679c8a0eac067f829127b76a5fc7b57e6b0ba256e8d8478bb9b60f668c5d4718cd87ea199974ef4d5db8cb194588dd16a26d9cbaa516afdf18eb516e90fb47b9e0c9cd3803049187c5b4e2e7c08d75824f321510ac8eee868c8cc2c9e1eb6916e7ee833f9c8490bdb97d3c6fb3829928ff94dae3457694a32e5927c14fd66fd6a57510a90b4a86bb27f6fc835ae0db962389eec364044b5290205274a5f91501ff63e6f81a6f6686ec0ab1c3776ddc658ec980e9ca4dffddc0653f96931a7788f0908f3640d76aaebf778f8dc995f4cc6bc49937304a5d225290435312afe1c7101469c34030636e2c2c6c961022279320243e2686813b200c79850fac1b92104377dc740404f9f9baff7e6b8c898a9116c845999ec9634f4392afc6fa57f8c01d125a5f9026ed2eb69f7e763f7b58d0e8a67e92c74c6d9b9fc3fb10da936aeb9fbcdbed7f9894eb0e5e8bf42e646d1fb64c41d902541d2d08e8f6f728aa7283b0c8e585b02eaa2f4d3fdd5963f37181059d7d1a1415b13c3a1bba6b440fcedc848458a968d0fbf7551ec28b5e13572700bb80fed257af2eeea320db1e769aa52a31011d6984f822b3f2a9a8eb9e0d9617f0460599f8b471a56a189f6acf515c76c31c947e0bf8855f7a53c64774bcdaefe735b6f59a5c97f58d7993bfd572311311536f54bcd3d4e602267886e8dffb7130d98b0f16db31bc15439e16a2a7046d59a68ee4816434318e2895aa0f66e9ac67d4d34687b0305313e7ae535b02157348076a19c047866fcb17b1612ca72f69d972f06951c2586cd55b4d894191a0d990fd35fab762071f22a3b1220caeec2280c0a67e072724eb026d92779445ea444a49f9d139293c1c3ce658154ed34cccf800a4c2b5d3c8010edb1ac105888cc9442e22b50e58b0ce814697b2c82782f0601b394408f7e3575660cbf606234abe7ce27cb3731cd6e02c991d225473f66496cbbf2caeba9d881a\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]},{"title":"联通日记—3","url":"/2025/07/29/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%943/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f2444296ff77a010f4e79b6c68822c51f6f684705e526dda8d9569bb3df3ea0219774db04d8d36ba5b03d1affe810a16ce78daeeee0f124e651095d44df0c425e4792ee9a2c58a2b925dc12ec3146dbe4566a7c74a394b6e203c12f2a766872f9730c598f9d91cbe3f6c502917e1a00ba3edec0da1fb087b5dc4724a3f332278e95360d70172742b02935707f8f78a0ceb60e81f0498f9d4cfb1744e76b46cfa5f2a36ce22f9e93380256e99fb3f67adba9f17f8f2fa695cbea6fe11abf12195845f6dfefe698de6696b00f356ebcf08d12bc285e0860786ba13bbdbb0d28df57580508ee699049ed1caa0acd9a8f2607c58e2dccb459497a77b278e04b63dafecfa02ef6b6c6464f83642f7fb9006bf0e383c82b5dd4107c18cebe53c5c6f28a5b755f101f87d96bd508ffb3ca8a48dfd99ad598d3412f0022fcc769abc3bfc96e2125107fc2fef6cd72e9cbbd5180bcd91c0490846ed1f38054ba955a114affe3179f7f15069a68dbc175d2edee980e1cdd01d0c1577d9a2ec266af9149cdeb055f6426504367bb969369c7be2d1c8a5e532d701fd99986f5afd8ff542a5506578346f660f6759ddac9d25c78b54b63f177b9dc7cc75fd95719e38b4509bee0bfef3fd237199187ff46145c8c881aa7eef4494f9153d5a04001092f5d21132cfd118846268433bbec2195b52142298d2b62b7fca41341ce361534f0695d3b02528927ac58fa4abe8d33117922a58d2c3f4668ea9a1626df0729aa240031f340ab21e0002cc10277824f49d9513229ba20ea55c7ab9b32ef2fcfd87062d763a1147b4a374e155ed5cf497ede115e08f58c45cb296b313690187a4a91b6e4c2d2d16111476b0e89df76f3c45ad8512630bc89a1eaa66034a1ba02c6c38b314b79bf5d4e4c7a30c426d03a6ac1025047c63dd5133b658c04161de7d2b00d16b0e0dd894a7947e21f3c64c949f44faaf8b0b86051fa2d8c85791fc7fffcea75155e09fd2e97d2c3b28a836cf7c7b5e4b3e3558d90f81c9d27de89bf461ed2f34526f8f61b2a47ddaab1e3c941aba268077e52029d1cdeea9e32ae679f08a76915553ee839b0a9d8e8c1f39e8fd70f9c1d6d010db2992634d96bffb5e0acf66ebaf72269a5fc89f6a525a5fc7523df3aac1360b4c13479273361b48305362962fb57c1cdc5581c467b48d765ee2023f0adf1e0c159cac137bf229e1f48cb81d49dd9d783b70c2ad1a4e919a5636e4f68d3607a463325e1ea6d826bbf6a95389532d6435a2aa2c54df83ae4e7d6913aa5836dcfa10d706f6a9a78093192769b519de94f948bcacc5631c0230b724bb2d2f60be2927d33f079c049544260bc9cac890e09a68c7189501b57e7f0ea0ad777d85815df26163da720bf62526369a1e0c96b3151b5680719e059bc8080532812f19ba686e6a65dfa5d631d07f5ea90cee708b884a8e405e16fb5c1256528d7813929c3114a5cde5da89c826f1344e46ad722b7f13a7cb4c6e03e36e7b5ccec26a0066d91945917462d41e4bb7a64ba20d8d58b7b62bfac2766632d7df7e88acada93a6a74d5fbdf1b84817b0382e9061feadc5777d96be3b544533853204156a96760c8a2eda2084f7db8595db7cd6f2b1e401a9c6eb4b53ed13571c64288a0f4e646bbbfaf1acc198b6a3f598cc4fbfe9d934e7a61b0db58f714e4203febdb3da404720915da5f80b858637444a62ccf7c7dc6b1ed41c5f0b64c5ffccc7425128dcd2edb40981123239a5e58acdb519d86b95a31bfdf177c7f2c89c8fe1b635dc1ba12e1f5c069923e6ea00cadfff559ee5bb2cdce1229e60ae6a57195063447ed3fa2b2dcd3f61a2612ccba25aaa791cab4bc6cca786ac911684eecf4d5c7153b8a72a1d7e5cbd546ef67da1f839ec952ef9ac4e593f3e68e6dcebc47cd7b4a46b78a1f8ef4a8b52cbd29caee70b2eb36989e5b68cc8184d4b5dc666b00b49e14a773798ae46757879a2fb89c9651190ade66f6f5f63fcbc00208b840148468f82fd5d12176a0be1d392a808b09a84410fa817e151c35a5fb264bec76ecb0f71ab26c5cb97ee998e6396341c3a2b152ad34af39d9caa90d1ca61347f718e20f978cfaa7974dd2b8b63eca9be614efd656b76cf16a4aa2c621a37e2ab749fb07ef95708e7411b8ad2004e6cc30d39bf95ea883f3b7cec59722676a5fc70e38ee22dc0c67b09ed84a266729ade422806972e6e1bafb1be746cfc6ef2d822d569b67498eeed3b533405067dd1fe3f1f899a8c397a07129b7d588d3d95c4a154bc8de1287bdaff1409b7ec78dd1a99710495137b3dd55714368681d2c2a4782c83e68c27e634d956a1ae7e816539b7a396245d5a1493115a79b2555ae9183a9de0d855e36e68227ebb8e9b5bff161f6b3d64a8babb7129ecfa2e6a6d1a763e45850663ab768f9cffdf04c99923a20ddac50de89ca1faed9a46d9bd54bd313ec93b20889830c62151a40bac1974943d8c70724e401505792bdd0ab098da95a79c6b8ec0675fd291f2be5172dbc113a722c016dbb368bcd756051a850a47048630a768e6b90d90db46c723d69599341dde71791a6178ac698ba59ba86d3fecef46c24edd43debb271e565e68775ca68b45c8575d0a3d64d055a53609f357f3bcbbb388d9343ddf9767d5805e2f4e2fc3838b0a1561d3075dcb73910ff4b631d3c862692f23c409b7e5b5b87d7fac20893028f1a2301d96e835c32b059300d1ad47a4f3691bac7619ad67c17437793944ccb045668424bab6b74bb4456da9707a6c95d68a11d8ee937f82475fc49ce738c9201421ba3cbc3f36aa480aa22e68f399a581dec4900076002841b2c05b602ea1b3b0f2d885ec0e49dd23549921cf6c9f5f689489ec36f995812963db39bc056c98e012b413d765813e8d44ae04f7af7168155840201c8aabe47261a7aa4f6239482f4178959503ed794c521f7da029bfc71c50b395692950cbbc0fa490a196ce12a9c39a711d64e9b623f909d3a1cf60334292c481ae8ec3b8f1dd830affa4fd8f7faaa7a3bb3f7a18d76dd003b4938c12bf7dbd17c1e36ed373a4f0ea6571784c47efce469a092aa0bc25ff0247fed308e845a399c4a408b3a8dc7329b414192a36b915b8ee6414e4dd29d6bbdb78e008abc7ba7a6d5aad89e1c99a91ed853a02946c2aa59745a2b956858a461f088a6c0e05563006a77e49347965a911e01ac23e188f098bda749ff03e2b075f5852e2d96424d6329f15eefcc4115f7ee8a75257209c8ec9e07fdc37df802e1a76da95b2fd8ed5abad27b8aec2e4f066229c620fabb5fe10a176d29ad5ceb1fa98f08f2a5a0e7941f59d2cd35c9d66718749193a301dedd40131fad54dcfe2f3e4bdb8cf6fc8c73e0b7caddb51d8d73c1e8d91776165248d356a3e0ddee625121142db3c344427b8819d8d393d9f992daf04199d080c0a763c5ace15bbd4a3c33214450e94f63d8f1bc1f8a5244caf602e10809bf8a990730df91cd8191169c0c3db2930e4cad9b55743531d67a6e66696fe56e9973f7a7cfbf49c47a79fba2af8c32b276ab50465ddfc1be7334cc2aff0a42081e64da8c4eae6f677f8995f4386ef8468a1c7cfda1992d2477c5a6d2ee040c22a6a5b75a302e1427a8a8efeb5cc436dd4bdbfef09436a094d3da6a2a0c87a5bddfaf273238acd5ef83d135f164f46c4de7b6a1685a8feb93d3fb6c7a28d42eff9094003ce0252d2d7a7bd669ac2a0cacf22f8d5850bf504b76b92c493030b9aa4327652c1ddc75ef827fcb197eb853c1e6f38e63538b62a001cacafa9f545e39a98762daf1e03e1e92eeb339f967c79e18b157057f032f0a2f795cdfd21a388e819914e37fe55897a76cb96201ff9e202b497f686171413ab27760c6406e31ec3a5ca7f3b79ca404cdc0125164b67c2dee10504f5a033dab2a46fd6dbdfb998e036388e5e4f488c8e7dda4e7156a700a7a997c48d27ea882cbbecc829d730c73a9ca49656e63ad6b11966e3b7f9dd8bab1aef6e8af2f9c1891afaa450cec197930e928baeb2113493942057ba5db039ded6967aabbcfa2b1f7152c5ed121761c422d79bb795baf90919ebe1e2433fbdcd6c60158230b3d5779568cd711efa8ce2766f53f10b548330ef7425a8a3c84093ef51017e8ac94e541feafe2a0e90e393dc96932371e471dccb5acc742b0def776e43be68f9f1d648194ad45a3ebf7caf11513cc57f52639ec67285de147fa3c296e34c222b1d6a4d3da5551d036f8acb56c602bae\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]},{"title":"联通日记—4","url":"/2025/07/30/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%944/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f244429613a36db9890e0d48b788c98ca0e518897991dab0ce1b4cbd6e943b631412b84e2b877c30a8159241be1974b37689a52f22d8060f5b6f65518642b7bcb953bedf8881ee3b957a6ce27cbcdefebe3c05f91acba66257d95b538ac5d3f5fd61a5186104c42c180b79dfe4d6fd3b9a1c19ae2d131fd4d668e8c32a3a39e9943f83f324b0071cb24af6aa8f23fd4ea944bd74e5e3cc0dbb4490a724d7d54e422b659bfa7e26ad32d77e7eeffdff530b0aa0a4f5fabdab9177faed9bdb4b43f0bef7720f375aeaa595da60e12538de9a03b693a7c2a97e146505f3eba8ae3fe5fea74ef9be9059135611b537201c553c83820fade494014276da89e367b5dbe86661308fa6aadcfbb78b916c98e3efcc24d27851b35ff801346d22d17741516be912107f6d03a9065057a0255d7fbf270d3fac997503b0b575dd7ebdb65b6725df0777df8004ab20b775a6e11e3a4e19dd4c7b84884c92e2c0dd9dd556054d0a6959fa0571fc664511fb788a559da9cf691312408671caaae22db846980161b9210b6a91e4673de91c9d2083c3e61f6abf3639b0d1fb2bf5a334b2494e57b192073cd42b9e9b7e6f7c712c66300513152033d6ca6333015591363d5d5ad19e740fcbc5dfdafafac61c654517c339e9b41a2534d92bccff64bce1c0840147a7b1481e63043f24d74ee22ecb95db905d87ab0538f6fbd77c4199d274f5c02488f534df1e9888ef476d263ee2d3fc2369c0499c6308ad137d9586c5fe68295c504322a56610e431a69ec648557240bb452b64efa7dd4954625828d3790ad3fd07ca9062c44a194f8aed91eaaca66f6732870e598b0676e256f4730bb6063e56f79d3a3ccf4e1fd0a29fd541ee603b0d3ed2f0689ddf6fd689a4dac03ddceb9c3fc3d966b27a076cf76c33bf2958d518fb285cec50869c31bbb81526dd56067d8bb31aabdd20533cd65c0d1ddab9155579dc8eb1b847d5b574ac22b68e78bcb00f708bec2f3a1390aa4a8eac529667669860d4f91047a763aa2d2a7c1b196e28835298e64e6d29bdb4708fc934ca0d7d3814ca45783bdc7597592ee747f8eb4261f5fd2cbbe6ff7ef47e53c85fb3a7d3456df4c90547333d041c13f9853dc0b74ec67a4689f6aaaed0819e92b2fe3f4d2ecccd9ffe7e25d9a7d1bafc6c1bbc3dd5db72fecb1dd702a6f917d385b02f3b8be362477b023ab4dbd6502c9c69f3fa7db2bd46264ba2955b4468db05ee86e9b1f7af258840c17d52bc8f75814bbd5bf0c52b3fb45540c6581e0ccb6c8e80082197a36c762af2dac619032ed963bb8420a8da6d847b4496a30ed80c7ac141897e1f60302e8f5881c66e58bb0322945021ebaced69c7974893944282b20ee507510db0514496fb0a5388e27c39fbad6b4ec47ed611a09beb02aa2ee6b7706012b904a3b874683ef019eeb48a79e7219ec4c1c90e30224ed8d6219a55275d223e0aa4dfda726f214a25d86f362875d6b7fbc0146a16ce15b3c42d3aee810965c0cfbec32caed3c9a04c5ad561a900077ae26a3123ed14d8679de5a3084c54241e403ddebed1ffe5717e6983767c5732a273ead9f1d37d43f095128f0c07e152affd5645b785845f1a1115cd8ce9210cfae3e58dba52489d6f52076c4012d72a714a4f17a24e88f2cf1601f67c67f68c8ba675def1dda6679a2faecc078a75adc99ecc6cf527b8fe3580ee48a7eb8ce66d6081717df906937cc0ffd30f252823cbaafcaaf3f5e9698002d47bf1993e39fa6634f01db3bb24d29f2e4ebc83ea73329b7a5f17dde8d2f69c1f34ba3f99c5067515ea631a7758e325e3d542da1ee9de079498d9bff98c196e24e4692bffd55dc995383e7483e2ca2981a9017fa78315045063f25c5b6c986d6ceb2a728df548350fe6faf4d68ccda3659833d07fb947d6616952ccf854aa7413ea3c2bc04cfae4393b8faaf47c829f905dc8ce56cb116907fb393ae7b8ffbf5fb390cfae2cbe5e6b2a1a5948013cbd07a8faaf5c6fda19a1d9a46340da52c91fc3df6df7ee5bc668bc905a7a30e6af97f53943318ee888c1ca7bcd15511fcdadadd430ecdafbb93676fa42d12c59f07e59b19c5dc7b1bc473f6abc67655ad32ca9d1935ecc97f890e6860994f6020cd72e4783a3bfd2c0b308f374a82512188728dc274762b449071e862cf4495b1bd682ac3420c995e266df974d214ef31033640abacfe3dbdf358e5870c73aff531d3ab11a33d163b758ef8c2fbe3b47d7de91728cd3d44ed22f182657bcdf201889c91ba0497fe93fc77468ffe015b0345ea61fd5c2fa6feeb992f4e9a5c70aeab7de8e50b98081a65a96a50e8f8e031da1cc2d85cb0ec96c38bcbc7d5e363d354d06e66c28e33bca5a890c141bb3a7a89495984d9c25764ab544257a40de1845670a7f9cdd9827f88fa759e1807d5f83864d3ddaae7d5f32266122b42c22749bdcc407082d8ec3fbba54f59541602a5f634ec074af858982d8e9610351fdc809add4f7a5a56628abc11a08bf93532807b3d5ce26494344eebe1346656e57dc60fb79dc1439f24426e4be10056a47dac7fb62307b4eeb26e63e8145f905c0866a326d1986f2b37976366513bc841717ec43aa98fd5a67aa90960657070911708fbf762d922e747c689e4582a0154fd6a2c6a955a6882cc0e274b1c3ecfe530961eab8c9bc84152fd12f9f8ecf16191a52e6e1b71e17af28ee01265c93761a0635ebe2cfe2e0536af5a31fb66382c19f940e2df969b3cdcbcd069ad50a9f252724ae536de7fac523cd91b6b4b00cf0e56caf72293990295fb68d91f5b1f274ae35df4155c7d4937bd4d30c81d4647803d085d417d5c930d69ba3f26e679fa646e825a6877f4236baf079882dd87e10b7ff0ab03f43d520ace88f959e0784ff1d29a734668702d7baf4aaa9d06b1857e7347e444ec7b6a6e80783c1927a3d0632ff5b8170484c30f3b961b983fcc989c45a6c2fffec131bce4fa084ab07e169fb24b2a1412b84fd26e683fbfd5874b261ee860e5624cd32f255d7d159deaabbee7719c5e6d1fe9c4698a4049d547c10c7e356c5da701ceec039385a4021efe7f2687c4a083bc749187bdab4fba8fe762dcef0d1328b4f9badd45df14986e39ee41f1eb3e188a52cc3b9b3fa0df0c1b936e0316a556396630fe048aa72193d6b160ba303b274b38884975b19e5559dcc0927bccf30ba0a9f7a5956299565c82d30c7e56607106dc8177776645ce3241e2ff14017a02bc4fea4537c4b6e4628528675622b7705b1e8f2866f6ebb91b93b9a8318d51e3eefc044693b9960a3bbd507c84146b0f9551b102fbbea4981c9b93935e569d8364a5e59a6b64abe9aa6e89f681d03a630ff87e609c5fb9c518a281e35de07249161117e55fec02b2e6302c1083a1d8e0484810ac1e9df79101efad46ca6a84909048cff79e8c8d006d26edc0e60e7aa88fd7447c8fa0d13da71921e51b3c0697bb023d9bddae00283\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]},{"title":"联通日记—5","url":"/2025/07/31/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%945/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f2444296ac51d1a25a557a2bf5766a7f1f15ec22c04126d9fe35ad9388cd56671cec5fa70fa00a639587f1211460c0858c546838ee64a84e56cb42a99a887eef763fbc219fa0c48e18a220ee37fb97dae99b0a978d5d53da82feb162698927ca4899f742093daba1a8c774f9edc86cc7f90a344b06080fa922611f5c092a3d5a25be6f1656e971c1ce2ad81d96f17a615294b2091c7468c3e754ad0696227dc72a8cf99740fa677c1e3bd3aadf83a889833103b7897a17079cda43e03f31e54998264709eeb37f99d2b3fc0d80407d1ca8f4c54a3c974844fde89d65cef08c04ee045e1d5a31ce6ce9574e68998a4ff10de2c4b853b6cdd51e2edd5b35d44032fc7197c9c3573d5da93ffa1d5ba91bb1f28651d6d4145ea1fb4daacae3669cc7794bac8c2443a5c6c411ed0ee4b409168b2445242efb5a1ab4b3b3ca634a93e12211411cf70ba93914a9cd5991e7c89227edb54e5650842dc81ddfe037c6c0a70d45acdfad25dd0e15d38e67e676c1951b3abfcf491a7a5b57c5de83df158a51bbd9c49e13d4fe66825ab912a0078980c84348996322aff4f00cd5c457ea124b91cda9f865439c43f906f33265945b533b686d37920637381fe3f07954e456d8b716e7c18c521b034d91c524575b619f100ff2ae3a3bb415eb1d9459b7fc045c6846539524eb347bc9ce47783ab7780473ab282c968241b8353a114876b1b9901e474decbe94b55acace7857a23da7abdea0386fd5b307cc81ae1c096b5698c04a5836f59a0e34e309c64290665f3a22163d5340439ab5e32a4e4d7e26cbde3558955f89b5cf65006643e54c462c7d6e32991596cdc01f8b3f70ac8fb9d3d0c2a89d1765d5567c5a0fae1ccd664644024300fa159775f24994eae3059a5e1c05fbe898d0fb5513ad79e8602026855a2bb7ac8a6542981d7df062faba65283f43306d7d95622aecd5a081cb985d5b54a9464ea15502092aa02d07bf8b8abef62e3b47ddd7e725c483e852f2eb2aefc0b1bca2a0fb8d6515c1706567ed3cbdfff682b1092bd0e73ad879002d8a7253249c8688d250b523d22581d16a861b34b7e748ea37ec9e92a207129bcc2beced715b4a19f64b6aedbe9822af8e42a0561fc3fc1bd47df317faef07927fca901af2c5f4086c979799e20e7df57ca70fd5e6a4515ae366f1f5bed55beaa5a8e2a11db56fc2636e730612ab7e3a45a234c387346eaf6253bce6cc750ef6866b9b13c656a0d98fe22d7ee51b9b23c7c007e1efa750c0a9279dcc6d818f56441d83b2844685defbe371efebdc09172133757efb5b365a2432bd317453c134c1bb2cc398c754195c3c304108c651a29d5aec37df7db1392bc5a32a2bfbd45941cab5cbf724eda93d3ade0777ddab1ffb19285fbd8d8a29df87bae055cc5b1de7c970c2cf8229e0f9ddb541b7d7420f6bcb43f33b819489ff6c61331c7b7598393233e6bdc407814faa6f127ed33611bad2bebc924d7a543e328400f0bd7b43ab5ea61e8478565750e25f884f25b2499090005f6cdbbf10f45c5313d6a8089901d77627a4a21fe1c627cf8f31bffcb2bc2bdb0c49397628971a9ab6193564053b48ab34e6a92467e8a1a169ba0772f33539ea4f7477757594a7032049f6eaa7c12ec700ac0bcdd2f722d9cf7305474a5035e85b833bf1a7c2a171126e2868b30495e668f8c2f8c95a2704c3b924a702acb0f47fb41f45c97c89352bb359e3bcf107f5b6d0a5a4d882b51704afbf7bfc340677eb70d8b0623687a76ce94cff181a510b55fca4826e42c52f2c19c98ceb6edb72c1357ca240d22b2e833b7a65c79e68710e1d4b731ba7a5d22240aa8ebc707ecaa48ccf98180667965ecf686b8774db259f67c7e74510e7d9adbeaee0e721ae21572da042b92ae4b8b5502e3e39193d16615f53deaee93fac953842cd3e01132a51ecda842e727b831f5b002b6debcfc9297954387cbf935e65376d3fceb6ec3efbf2d9b7f24de9e8124cb3fd1648628954a455bdce9217a8579dc1ada9c0afc73f911c844cbe486cba2ba9a41974f3496bf332579f9eb3a550430a4843e74ad06d05e5457352efd628df48d5d0f8feee5d6184dc6783ed76e8554a2b5832681143a2f30145558140a8aa83a131cee9a552673fbda554fdd6f0a933b64ecfc1193fc2a66e11a23cac45fe1232ec5bacf86be364790f46b43bbec28289c0834f30f937fd178366670daa894e221df905d97aa1569d16ec5493003000e36c8e5896d6f97c02b9a59bdf1f59aecace22ffb500268433d62c3aaf71b483138055c516f161c515d6642eee8d68f23f2c2de6f5eb2ea348b17c00982be59e5136e18cc8ebd22e85fd5e4131e4c9cf3f28014ed2e78a6a599a63dbf6f59f28235d43bd9750ef9ff25ad5183c733197df7e6a077f0de26f010e323945487a43ee064342d68260d9e038376b9937ecd9bdddbc1720d5f5e2609056cd2f61ca24fb8b1e9f6a4a8c197022d32387e4023f03d13153c68ce05c2e5b6b99\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]},{"title":"联通日记—6","url":"/2025/08/01/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%946/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f24442968cf7fb28d74d216ee032a158248362ba4798d7ed0df0df158a5e5f7933d6a8caa741f01b5e06c883fde35d15ac73b5c420c75a5940dae64773015f28bf2d354a4f545e8a70b5540a987a8799d120d38b2bdd0d6b1220092433d82656f366693063f1ae823351d9e326887a6487996a1620bd0702c7cf832e9ddf2c4ae99c69a3600f5203f1ed0c9af83b0a6d820a4d9e0714b68a3dc63da7c40a04d716f57a0662a6d011e5b06f34b98d238cede2ae42c8529cdedcb65121818f438ca758a00fe92bb4924bd4132e01478d4a9f12329b86798a0c1b77d70da5aa13bc83cabfe44e0e98316ae24fa0394d8f579bfe51ac4928c4c5e4705bc1f8fba98bb39f2afa3ac5caa7d9952bd11e0714c08d5cd534271a06d793e3803eff305f97b9ee9b6d943e81d53148123850090c76420b4978fe155f1f1e215b173c7f0db3639bd402c626b59aa1f406c622dabd1e9b56326378daba4faf847666776caf3f46e8b3e2def2fd25e5770664c0566d9dbacab08f75e20ccead0265e8fd52e9daba7fc9fd9f3cef43947e0b8fdb5d277686dc7c37a9208e82997044aafb111e56b3bd264af1e3b5afb1bfbdf4924bc54e1e5b3b82371a0c8f5c73ebdb43045a0e032132d3152520463f1950fce162e4eb06c75de9fc3724cd52712c73d52d72535bbdbf448cef1ef9f705d55b9a841dcfe773f6f923a0e1ea523cfbcec073718564e652ae8f6b3304d882bca1ff6a05591112cc4acc479dfdad2c1c54bd36ce4857875daad31a0fa2c355b7f971d4562f088ee05db07adf34330b084e7653d78e159af112795e14e67efbf96fe42d4f644234f6122d6d56ee636b2f77454335efdd693907c6624551642cb4302b01ca8fac5d63fec72b93cdd034e761441b023075784d26a98f5291ab66fb93bcbfb562d6c7524a4f6e5f8156b4c6ab8c5b6c17e855fa867d109c5e9e7be8f6df7d8d1c1e6b86944c3e701a386314e1b09a64e2ad11b49b4faf8424d0606f1cf5e9173d42fd3c106142a2b12ceb19ccb5c2cfce2a1c24c054fc656ea5724101371c24ee9cd64120c12513c03b6f543c2ea0ff9ba1a9cbddd64161ccd97b7ac585cd317a8aa861a872ab33ce1cd5116195074dda089b474d1c5d9f80562bd6c1067fccb678e690480c5851ca65d295f4a6734ba7114813114f11f534230f64c2f6594bbf0f23b96abdc12abbc0c55a87587383c5126ca80d52c835276128b8161181de5f64cfb6ccf92822274367dbde7a046b98b67cf08b0bf7879fba4a7edbe3ec829246d3ba90d6268d31bfe7c9901c11932f6d419edc7547c1faf39693263c69a651d01aee1c191354e34c74791622ed51d03cf8f3fcb06dabeb1460a15cb10e809d651e7075b0c9c6f998d82aa46ae367f09219300c648d8b8c1c2479366f2c8a55a1b4403cdbb2ae7c24a97c3b9aa3a98fbd8bfadaa9ce2a5ff410b7355a74ca71da220956b42e16ad723eada48067494bcdcc9d04ad7422e6e9e4d9f887a12a353b5d46d5ebd2c09913db6618b577a1834dda7b9bf78874aa65a47ef5d7a6283a885810064e51b697156cebf4bfcfc2aaa47cb1291a1f8f150afd7163102c7f6af65d0bc7464948afe6901b7a148c61dc35e928b845418325009c0455a56d4ed5f08e08ea40efdfaca702c5974819473392dd76ba2646c3313b051a2d7fbd6cbc9f1088175555721fbc4eb4874be47f4e0e9e012d38479074fb5b58d6083c77241808815b9b9f510d49e03c89f3b07a2e7aa45c5ee9ec5d6e7dac088ca8f7f50a84af04caa14db7a9046f7e21183b9b56badd561188d7268e5e16d873b0b618e7056819855f90304091c8d0f0abe10e02923326ba709d8540a84c3713b0204ccf6fc9cc62359c70fc853398939fa2b621e5c5e85af22b000c927d048d6e9af5d4b5835199a0f08ae2879a90e55ef9b396ef7624d0ceb33e1675482bd1fbf065bddef92c0d1b3c86824443169e5fe4b665e69cb5203388a64fc8aa3189993e994216cf67e439e511cfd66fa796f73f7c87a8cfb1561d0c9cc80810c839a5c6e24a93eaa41d3a09ea1ecdafede5435596ca1e269c747aa6171d156c23c0966d0cab801aaec73ff027d3172b366cae84dec34d0556aba3e4646e54681556e46968440b644e75251a17ad88a66d3bc847ca17956276bba9ef77fbeb8de317dfeca78f2454e9d4aaaf840dd737621264fb9623cd07111e38733875f79286ddb5f6f5ce7583975a8fc0797e7a72c6143020d7672dd3712f5a2e9dd6084861421eb0d5ebaa6cc0e3035e96bcae430d7b9ac4c06f584b023db0863e71ee03277d7b9ffcc3eb8384d265c6f563dc1e3f15cd571943f832c0a06d42a0da964ac21b96b0f7b0fb07c30ea7158f10455afbbd3e3436ca639a2806cf996ba4730766653d642e74c62a7c61e91756fef7bce81a80afa43579cf99e21fd6a6deea27d471ca91e6cbaeefe83d005c2dbed23820a03e49c3bc16f47952aeb7038250e7e3b241d3518d9e18a1f8c45ed5891930f10d8bde4f70fb497ffd6e4960b4d98b27416d43b44f082dc5e8557bc49ab8632621fb37e39193b09a7bce083793d05da7dc4c1144f2a3e7233cd88a459945ce860de04849aa91787699a6c920fd62e0508a0d66ca91049e8a136dcd92fb74a5531ca8bb3bd6b1d0816d0175b41a0c5e0b07c5809d9647d410f5d41948974914912cd444fd262db56d643a4b2fb67011c6026f563122841e5a8651dc3f3fb2a64b48ff1cada048bb508363492095f0a38afe5fccd45e11abb4eb28a067f953ca230349a1b563d754d9e17fe0f504351ce73749b4a6c5211e155ae8b12042b342dbe9504fe0dd751541a52a2c8542fe0b1847efcdc341a4d0e4756ad12898e1c1922bf65461e9253d4cf50e4fa84dbb0fde783e5b8d088e95d01cb5ea561f573e202e93b5a6d58808fec25014c22bbabd36555c2422ab460c81085b778c29bdf8de477e79a319956c544542432b986345cf599ea31263bf049125f2f6e7000e7e33d21a1f1f4ed7ec0558150fb3174b6c9458f875d43e862bf337571ba5ebd03171318b803c4365f5af5fc0c6953668d2ca8f740bd488fa1ae2e9f828b036401d1ce07e8dff41c05a46980faaf4a8a1569d0b2cb0cdae3e81d2545cfb190e799d2b0a64b31b45291c517658fd11e1e4efcf42188c687599f7d7f63346ac5d82e06482cb9226f941ee21d3620cbd218a6d1ec90e129fcd04750ebc2c5cacdc387daab95ae9ed4a48213e09cdcac5431544e98d90caa36142714cb2403f1c56b22ff69bc04f723c21b172c44b6d8a4375a32718a844df72d9006c76da722e9d28daeb0d7ce036d0466544f55b066e6a2af2e61d219af6ec1a79f3f3d838d62a22b42759b07132d266a96de7ba241bc71f93bfd8b90682de5641e138e98364231f828925f207375e4f80eefb3ee557dc78c7a03f643dfcdf19959f935c74f246384bbfa8446fad81566c79e3a3184c23917c884813dcb2a890a405603f962e4a8d97a17fb82c06e269a1dc6167394239c821dc220ca815a135efe39d6459af44bbd9c42dcef38a356eed1c027405ecb5509dc521adacaf8e35c1c5a5fce4e441e59258f1c97825439430cd81\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]},{"title":"联通日记—7","url":"/2025/08/02/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%947/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f24442966bc69509b56ae957769ffaa5eed6408e13fc4da7f358102b3dc05112b8050669066c52da92a68cb283d84bb58f65903eb204817da065d82b7e07728c9129b5409606e366ff4f6206c6a5780dfa55e90684220eb9aed88d4b104946bb27fe0a942f7b9fcef3ea06b395a514b3fc86f5124d40f95591c888bd66b9c5682c3f477259f9baaafdf54a4f9b6c82e5ff03510c3a05f9bd56e92e99b9d387e3b2fc9a2d6574a55f6bb476cecd7838d805c57d652091551641318a030967c641f37361759488b132da7db244ef16dd1b1eebbadbe657e2470d88fe65e99b459a7ecdc7f7491b28219dd1704de6f7a9e91f114b31496bf7a6bcb1c615c3eeee64887f95c72a274d9d74de73c8771b1c4622d98100ab857a0dd74e3b54a991fdf61850d3021eddd6ce5741578bb56363b2cb9bb43d5bb5fd698d7d6d340f86e641a832964aa25749f18407a755e72e240cd7469f816ed655e8f4713a7e5c65b5eee72df8f96cc9b8816e7a9cbeddef670c51d5468398756449d65423e73cb67fc40e1be8ef367e7af4c84e2a927445b93469fd95cc746a3eda90d6e9a80390c376d3dca06dd231303c2c726a91afeffc10bb8f28c4b6587c528b48891fe92cbc69960176c7d01a37af624e074e1371b174eb77146c15a47587f22f2c481fc3927fcb391cbf161b0f7505c34c02e3e8c9a446cc3369160a4c4b54887cc6caf4e6e356e2445ab96b9c88612095676ad6019d0f8dc8dfb767dae42b47d4c1ccb7d15500e7e585d2befefc4d9f77cd4356e32c2839d87adddf9cafa59687be175446935eb00e502c88b7d58de5de001d2111ec0e939298aa07de44b7f4ab852891a97f93013fd192158f147af644b44e0865ee55253e61f714f012e63b56f5ed81e530d50d2a12b402e7439a83f7487fd48d82bb080edb40d4465948f54d366fc15b97bd3dc58640b0c05b135e77743c9a5bb7f22d85d43adf9d846e93b57d0cc82a8b30375dcbd896dd7c51597b11592b94b9f99d404350ddf678b53bec82ff3b7f4bf97090f75a6044dba9eef04733fe9e3d52b9200c37b9207924f6bd999839a59fda43e49f6a1cf5686a80d17c5fdb260d6865a0868fe7470eccaf63588be571ce5d33f94df240f0a353a49fc10b5bae8c9b4e435014fe69624360a8a6c3cccfcb01bd61a700f730e366ad4557e7bec8157382ef3183add1a9a0643b3ecc927189caeed5fc0f39d29a5a4814e47a35a3c634bdcefcd3bef23d9d6d1ce6701d07280ddecbaaca483211815013fa89f0af6c28b2d3d330ab8a8c693a053ff3e09078796c0336ab9f63090b15a88895cd79e42b25df3acfa290aecd576ea55ef183cb8ee6aac45779c922b8014108c7cf3e13ca6b86aab6539252bf07e8256852c4884566322fbca4465722fd513af38ef5026d6749b794c6c2e9cbdd84f8b7c6f60b0ed4feccc4abda4777c1b1d36ebed69a03087f14c70539f77a982b9f32e1835dcdba37a8909bc215745a9a88ba54aa4bb90c96d5d48f436eceebe82b762722d712215fe2aadd57b0413fd2010996b45b40f4c0beb2d89553bc8c57fcd40ae495ee9a0498d910c5d53c37de4cf4254d5468eb4116f52bf998f8555c189fc5219dc8ff4b9e3fe20a59806fab18b6f7c0b231b8f304c50ccba6ae21e2753e016f10d31a2f1e785acaf46f5d6081e4da8972a5b9b81af927cc4fcfd4d05a7b4cec1f31bffe46e7ecb2775f282ad5f5a90fd4957a11a189ad03bf9354a093a16e4807292248d0d36112caa26d0b3b24c8f0bb29c92ac5b8e6c57f0de6bfc6be641efaa6e1b1be04f65f965636fd5186ce4d585dd2019e65320eb145f57b0e32f0dbd2487a0ec7558fd5fc15c22cd2a41d5ee80a73ea13\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]},{"title":"联通日记—8","url":"/2025/08/03/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%948/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f2444296db06f7c4b86326fe777b390788c47eb1df75a78d7eee602275db59f13cf6e3d6676de6db94d0531be833c8de2086bc22e5c9da527b79de1f6c234eee2cd2f2af180fd830d158a924ef7c1de0f97c38301ca8521584209f176224b7f5730854547043ffce309f0e1d0daf859b03fc3e440bd8a2944206e3ef2a335c59b0e0b474736e297d5590a0a71badb8a2c6d7fd18f802dae81e4b9b2337f078f9ee428ca4d6baa4e08b4e6bd6bb4f356f281c09d53438d723537320a1d207b9aacce717c6174040823da9837f726bfce5a50a6641ee3074dbb9ddb44d85fff9e6c4c4f9a171ec735cb48d7dc3ab780d045061851c64304819a62dfa4392625cae16c4d245b8e05d6fc29335de8ba7312863ab590f2ea9c5f49d0a1224f9e6a50b5d127545eeb9b48736503f986c76c17e13917c5384cdecb5824b42476f9ac1d2a925ecacbefb5f6f7b7015c1046e62ded8535b8256bbcfc318da5727d91363474daa54a62b42e4bf2047f3d898c57868afcbb62c54c552d7154e16c27e305e00f88ad4b251c9d3f2a1cb7300613dfcf2f62b79d4947f4166ed987839883ca06f5b35073386a97ff75bf07c5a09f3555c05d07fd5103bbbe2e98a41f1f82c055f77dbb68e4f7c0d5d0d06ca6e878e429c8cdd4c15aa430c1133271c5a3136cc1b45f9a68be4ac03a35a80e034524c35840fc387703c9c0164d979d177f6331e45587305156b3e1a97fc107b0db85055da84ee76196b6e33d1e612c39bb797c72e6d1aa7737794de9b14b22b02620fc7656bc0adb08de2b9ce077024ef166565406098d6a154c03c6f252b67a966d00f33b9132d67bb1713e66dae4ca5fbdd60f5ca5b5ba181fd7cebcf2b63f02e700aceba6d9b94d91b10d22380a3e2f7894124e3bb1473def7ea15ba57e1a5e9be79840e01755f8b0ebac07d0a67e5cb29a670283422c73b2ba6d0bc278994f2fa0acf1c5a697a5b8a8f2931ffa4bff3b28453a52fd61b589b90b9c57f3aa53b53f15bd1ebff2776821777cf2c3a238fe54671647c5e25cdabbce39cb395b4ad1e67ce0e07023ff0040c330a7afba37405198a60954fd5edea5685d24c577e9c21bf9f7ff9733d0daa5a5236d4c20659300e474d088172cc114fe3d7f75843e7c97bb2142dc75447dae74c3e1cc9661382b7e2f3b7abdc30abe09dc210bbec1e043f7325df3098b62e9dfa3b3175af540174c428b8b12108038cdd3676dff1f2b7eccb44b5d49877e081ab422c56d083ecbf21b1ecfd2389a09eccb35772efa6262ddef852cd82f2fd36a5bf0ff8dfc10ea63e89a6fce7c7512b525ae269a3142a716b673289e2f64673242fac4c6d4e317ae9b98fc0c9190faf2651f3aee5b448de9f689f19935430f8a0f3cacbfba5e29cb116bbc5f4f97faa7dc21ecdcd4ddd3c63ef2246961426fc777c439cc9f52aae5864af6414a9af3aa2711cefb4e30219093d617502947cfbd0c31f53a2a71578bf96f004144a3bf66c4797029da1dac195c55c617cf962972bb6d966c8e0599500424d844ee5f7ba2d5b936be2bd1b19d11266510be5eb379a1457e95d1e06fc1843468b96\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]},{"title":"联通日记—9","url":"/2025/08/04/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%949/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f24442967cd8ff4cc2c3b0b779340e258e3f2a7d52cbb9b1855ed250293d5949ec79577f9bcd858c132c9d155fccb1aa26ee2dcfce12d453344fbdbde164c271719b0156ff7798c53a5f0319c75c74265759b77e1884754c1e4444619d32294efe0d87f115f80f30f175bbbfeb1a7a90990165d4ddf1723eb22f28c0939bf8b7f52ea36429f9e2df1db60bc1a1b8681a3430a69e76210b09b998f1852f1cd205cfc229284cbb001c44c6214323be6385ebc40958d26b2c3a59cbc5b8d0a06c3cea152fa186190c8d5451c5a62f0d3638a14c7b2d5ed2d678e78ecc6dc7495a3b5edb163d0148de444090a556fac16dd1abd68ce854ef3bcaf82c8c8db1b5fa65dd6b7205c391f578b4b9860868620543412bb568d0e770df0589ad2acf06374f75aeb7e865289fa22238deacef4c4477fddcc617d6e436d42d19babae3304c788c35bc0516e6f6d0587af13dd2de1bd2c355ceb4ede374d944ebfacbc7bd75e6e1fdef5855cce682ef2896006e2d61c82c7e408df830d736a755d52030173327576095c7bf5bfc2728e77158d24eae11e0cde5d791eb54fb1b3b68070e139e5cdfd682201fcefe2f9024b6ed7abfaf10122ae25aff50e286f05e341a8069c11779d300a40e5f782bdd1feee2b2be55d7dd4460b5cb2030555d04cb34a2fdce3b7260d7fadcb4664f45a6abd28139fe6fbccda5844fe62c99bd9f63f3a1817bf668c362719387ff8acbcca012d1056604bc74489f985a037cf8153b98761e6ffd6bd686effa80892dfd9feb521694404e99bf81f74adac4d938791753d651ec8a8be0a34c362a637a1c78dff96bde75dd91bcd6786bef8407dfd8cbbedb8309b67af6c3f79bcb34ad9b7de6ecf3e5acf7cdb8ca661603966eaf45d4e34535e88a2436a32676d9419c1de5e002014d9e14c3a6d9a00d7c9c19b86fce4b39886c1a639978c076e1a8f74c464ffd45f7599512f9f02f7bd2591c2a3da08d053e86906eca3e0d4a116ae601310a332a521e37ea467b72a224ea45e22b35b3eb64162e91c7143b443803bfa43bbf4a5ee09d833f2a344b6a17bb52946b61d8230b8730c327b1443e43f14e314065e1b4e3677c225238daea1dcc491a98ba0ddce7069348ad96d18ac6f7b13e0f9939d337d9aae5653423a351009c992e45fba48154d58cd99fb4eafa218caebe255b94eea4c2e3b3247666e58c3e733d730639d728497a1e963f74e15949791adc81bcff822c118ddcc36c7e02e9bbbcd0979a0a268081bb019709f831ee121ddea88f039d61d2c3d34e28cfd52adcfc8e50b9251bf8e1fa16a0459aa473ce6b82cff2d014909976080d9d102f99c54a05f4d59003dce26f15290b0ca1b40c52100d70c9bce1d470fd879db1607befdb4ccdf6bfb2fe46f677148ec9661e13f1d741fdb2fc7cec7fed3aaab2b3153197b5a5a6b09c936fa941a1dfba165fbf4a330359125f40ca6e7e312f11d85a94d87534cf9e7245cf7404aab484a07ec58c6446ade726c025542c0645b55395bd8fc52c7df6666e7493ac49d135fd32b23eeab39ccf0eb622c1b2c4d1e01c35b61f46c451b4bd6d4e7a9d10dc89b5d1fa1b22ee0ddae71625e33093e92fbeb83f319bdb09c34bce84ccfbe9d78f412b26de2e01dbc61c88bba6a6827da7efe74bc62b8e74ccd5f90e57f7a797e92cee96d9656b4ae7118f00c59f6d2e59e09bce2e3db46d1eb03138f0f6c93c5f1ea17af7d6775164f13ec437c3a00eaf028e4850ec5d1264f66e7b4c5d07715298fdb682b2f28be4a94d3cf2d08bf0323a14f0911b6c59e4360dd96df9356d9156bc5cb071f18e825750ab574b38de08629f80753d4cb3733325e57848af3bef458c855d5047e1c51d8d15de111b292c5005d7b93764e0c243cfc5d12f45719ed40e9de41b3dba76aa438dd3881f07bc053098206abd78442bb03d7d556f\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]},{"title":"联通日记—10","url":"/2025/08/05/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%9410/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f24442966651d7a9491a8c847a94288a11cc87f52ccff1c11f52543e458d12ea566911022bca6a23a9e9e3315a745fd90d8ff7f40e031921396c1956d648e106611c2c9aba7616cb5477b891c6ff6f3e7068c428fb97d362b3aa7195b06048d9776e34971a8cce7b653ee4a84e9cf318aa0698e2c14fe96bd7c6296a05130647cf9cb03cef722b617a7c31cc2540fb12b93fe98afa8f4845fb218eca33baccea1ee887b7abc8b24e64597e53451325fecf1f6364a2c94742b1dc2f30b95c996d3b5ae0d5085f0a27a986855312b37371ef5441f6723def50ec187d777080ed0b3317e8e0a1d5550378df68142d5a2e73f60b674a4c4190a5a9a55a322e4ed645dc2da4e44e529f76751946ab2d1ce304ca859865612765b5057e197f3386423b8a37bd50bda2794ebd836dc6b24cc60528028a930068fe3b7d043a27140fbbcfeb4657b7dd8087bba88277ff924af7607ef062316e199d8bf3db6ef0cd4dbe012e06ebb54b3e5aa7546f974fa42b23ec223e4a8be5fcf5987e5e0363fdd575903a81be22bf693998b3e9e6b098eac98ac8229ad40e058dad89090fd2c9cc85498766206a078985fab3ea649ea93916c450718bdf90a42d3cc9e53068abbab3434a5a59915753df103aba6b6c0e05db6bba1930dfce433e6dcb79eef390b602ab6b73f49a20df087f875f52659b91ce9ac444a5f49662ad08e6c64ecc0439bb3ce6a241b0f08054eaea39b9631993d9596c0f9a7b375e297db1505d5ea9c9995f7fe9f00ff25a742393b09d8beb269ea405b51c04d985fd517c535dfb68ecad54f55a363d51589e9e7b59c0e9381a025faa7319a247acc0e0aee818dd2efb0ea7fb5265651aecd1c5bf095db7bb9d726e81b3cc1bb87c0cc26f53d877e9a4c1a9a53353223bb69c076405445ffefc1766e49fe98fd0fca908ddaa5a7acd5975e4867a98fcf15e4a2a1cb11762e7e8ffcea698aebaf0dfadd125c4aa5dd56ab3a81b2f665f7392e16c2d35c36531d41711927c9aeaf31cecd5a0b7afbabb55dfe431f689e752e31775bca15377157c3522e1c02a9532ff2992c5438e4413b3106ad217becdeb0626a25a4988bd976b64528c2cb5131c98ffba56da7979e81590f75ff0f717362e00f875f02ddcc3198c2a0ebac13bccff01a0e53c4d0d8076223456bbd75a3fbe35aa8579862a86e54da235eb1cbbbc1583e39f13562cfb104d813eae8a963d87e93b14debdd1358941b916d58d0a1f9db9092cbb14619ff3bba046fa96f7159d3852ae7c26f1ea5025f743777ebe8e5ed59852a698220582a94d6ab67862f05e85aec9d47c3012cbda26275f1149770f1ed5ccdc3a80dc2b45bafb69015cc259466e214975e8379c29ac378e40fab6fafb0f467dfb4558317da3f7d905cd79e1a41f3b94018529f0a2ae9ec7aaefedd6a43f8fbda18a79b3e957fd721964606acfb3a003c96738f6ab46c0795f6e4178752345df1cd03fdeeaa2540faa1aea791e28cef69d425931f1d717c0e5a31cd6530f7adfd3878af60a25db05de2159acb4e0d6d0341eace1ce258c33489317361973a00413bd8f86347350d910ae756f526a603018388e3ecbae866bc22f389756707cfa359d84c7657b02c1e38ec0444026690790825eb3abe3f92f3016e192cdb20d47ff8e8c1252ffa354d39de01de00c0e0c915403bf8c476884fe1a4e62164bca66a6922fe5e2811d1e27c259763f28e68021b3458bfab1bb980003c23edf9fddae78ae220a8298d93058ed8edd72fd4988fbd8c8359a7864e4f738b3a9850807003983df05c58ac4162944aabc1db3db1bb9d92ba37c72c4e0ce52f28d79fab9d2cec4fd7cfc3b67bb32ab5294f8f4a3aa707b274adb48bb7755994984d68a15bb6d226dd80158fa8036a95fed40aced35ffc5f1e3c01fafb3ee5dd340b1856c7268c03a5dba552c413d66757fecccc759fed7bbd3aa1f81c4c8d3a35466fcba1ded3720ea74f02111a0ba8f2b590c45ef6e087a73639c77a01da41607bcf61733aea1ffcfd6c3ec4c36ee693df5622c531cc8702ceac2e124a458b12e6093ef4e1e42eb913f30b3c2bf2d4135567739e163dfe54eed1bb64718073c74df8be53ad96f5c128e7b9d9f281f314edc1ee9780998e133c6d30fdc9e3934ed331bc551b082709a1c187fdc51aad6f51f7d1fa1e59d16a8ec0fa445095703ad53164e54951134aaf2ebb6d38bf51a7d40dc613e11b9ddee56e22830fe0e0fdd96a2fd2230d4c3b2cea841e12bf55e5bf1030cfd29b8459ffb752d40caaa19883cfe6bf6e50d11c44b502deea7d0d569d5c81dc2723cda5e54cd01f012c7d03b03e644887f5eeed320d08553cb0f42b6719970dcd84589d07f00a17493dca8c5b10657153a0ab9515a6be8ee343159a5fe2ddbd9ef73b5878da98805ec98b7cefaf12d7bb1db7ec44f5cb0905211a74f94acb56a3dc9e7f6a913a568df67e0333d47ae13ceb851240fb17dcbcbc16179cd59fa7dbadf75ed42c7352227f47dc0c2b4bc6859b43b51fdab08bb244116f9500f9b1091cd0bfe00a7b2fc22845de18a196c4a2b489dfec8b9cf537261c7338ab59140bd4276e658d6db07833357ec13115a16cc1a72bcaf0ef7c57d8eb91f0371940e3db17aa833c4150da89464040df62b4b555d60943d797df75deb91dd8e5b41de97fdbe96391561bf99e78ae3f11031827eb20f40170ea6e1a7a96e5910fd197b77bc0c27752dc7cf27f41babfe3877b55af8361a5c7de2761485485665c90dd88d4168728a70991074f1e83b9ce43cd1ea010cd0bc3bf516ddef92ed588b303ea99788c9d5fc43a4f9dabdb87f7fc60bfba93811add1a4ecf7307cb70cd5c765f710dc38436d1d2085f48c25c6141cecd16417fe025e4c713c8bff8891e3a2ff352e19fd40f0d2033fbff8d981cfb3f582eefe4ed45dc678ca259a20edd378f92d75e224ec89a887e79f33faa0c5ebe6910d3471bb9a7363f013ea4bc1d9fbc8571d308edf54d9fd43fb7a36d5a2b7adff7292617e2b0e6a52921c4648b60b8ebdae3d1b1ed01a767e55bf767b9b73f319c5e7317f42d423b2703b9b4fddc3d7061e4796f924507fa0aa049f31138c55fb40918b6d76d7b23989d167b7efb393aafdfd136fbb2ad3ae5e\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]},{"title":"联通日记—11","url":"/2025/08/06/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%9411/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f244429699039472d6435b42d7b0c8a74029d1bb1488190e66e3d91bbad2c5f7ad1ef029cf08d046b56004ca34d53d6c4da806051d9f85c96b15e5d68b864e661bd1782d4238c5ffd59fd86ffd9949d4db3b449a97ed3675f696f6842b213965071d312450ec4fc6aef367d8c00c3c83712c9cd5adf675efb5606fe19eb6c58ff6ab0e26a015f650e0eeda8e5386bf15d1140967436cc72869a35d11c71bb1f028da05ca6a06d2d412aa67b6a28008a8deab6c81f64ff4105ffeca09f25c523a8c4a3c4f20222a861159be3511ad9c3cdd78f78408a2ed163f292d13803868f747c3b0850d3defb75428e0c230cfa0c125b362b0d0a9ef4410811368b71f862a22f9bfc2c29beb6c08e5bdb00170259dde059fa43ad7bfc052bc1c352bee711392b1471003c817d87707f8ce60027a5e5c02140e93b9fa75dc50fdb47f0a432cd16ed9c9f586de418d18bb4eca600972c90f89fb44a64df329a43626230b4aacbdc53fd7fa48f236090475e73e6b3a31d6d2b4a33fa457c0d3884f404ef575f9aca5e5800891f0e52e83e2528a665bee798c0b59feaf6273df2a4e0e70e86dea335802b379df1d46356b2d653d597e37c89de9100e22ad6842bf59c4023f8560f1e3eb8a6aab19927077a848da2076181fd3a66a27eebce7bfe6225d94121ac3159fc99e21eb7ebed7f4fe4a4354c70c89535c9d3024bbfc402975816163ef8b6cb1f7a72e520e77d143572d09ed7873ccef88c57e0a3a00636cb88606a176f2947323ea9874888cc73ebd9b4da0f66bec5b93fa83087fa12dbf7a702471f4856527e00c4d1542e3b3e1826c20f2791bd6cf033f58557d6bd47fa3625474f481395c6b22acabbeb490da8bfe285938b1490d479cc51d1f5f8613c51bf1182e1ac58b503ee22f1398bd62ac9d9addacc76072409be5e92ac627d8c9568dc879941b6e5547dd2cfbe331dec9c4dcb3c1870f4ec579722e0fde6a45bb7390fdc67fc681c15a41984190c7dbdb602adfebcbb5d52c9f6f23b12dddd4493e90c5fbbf6258453c12a0ada9b5cc502942df8226f902f80376a15d9938199dcdd6c15617e0bb212df4ab3d9921b198b06a4e99f50df736f6246dcf97fa8f651b0618187bbcc1af07813642ae87a6b810632510211409c11e8ff3d53269a73712d254de6a17382c8701edd50440021605c246443a243d206ccceffe30baa8e6198a11f2acaa938b3cb3fcca81ecd4ceebbca61dd87a95b32fbffc004c2dd001f65b3cd76f3ff6caf13c4ca24fcfb2c47783fe8e5eec0e03491af448af5087c29158136fb97c4eec16208103826e39086c457465b2bbcbf845d13e858d9b1a5192f24e2167af143888c77fa85a0e5567304e60c5cda21539be7e0b16ef00ec0a542fb56ac18de3768d2f0e47d8620a008ba3fba5472bf8ccba557beaaa66f703bb4dd45b0b72087902b17da868912d6ebbf931b0044a471e5c957f6082c84ddbfc2ca3768b8cd4c92436b0e0913a0844a89c7564b2c7327a9c4bf41e3667564b0cec35205a979e0b99cbb56d1b0f00ab3bb9706d05b43df0cc852b6d9b21e6a171d26f3bc7b587e84f266a8f26c954abcfeb2ef1cd3d99d7eda873770230d80860ee3c1c55a3833424fbabc0736065e3683d4bdbe2f3fbe1a8d0fcf295dc36249138175481e904fc70ffffa58a52ec7ca41479141ba87d15435ec094997e110364071e86f82128557d51541a797d45ac065924f8c47f9753a371f547f5a413b11455d37cf6c2c53959f1714dcfc96be91a072c50372e61407b7e01089052344dfec3126c3d4d3f4f8e4f4c9bc12a5f7a68ff1f2bb037310a2198a9332d66fc71e055b66500a6e1163559c96166898475db30d2dbfcfc09241c9d17489df2a1251424c00830b56bfdda290d19090c921730bff84553adad5a7387f061e2efe778a9a4165491918274e1654014e80515190a03152c8c302cbd3750bceca58befb5b7529b3a9a109d85451d740111349f6b58790f158cbf9d3a360204e9f8d3241987972ba75bd2ecf088d072290a74aca4526343c8219d555f9ecbda5c28478a8b03947466d048e82d35ef51063e0dbaf4ac2313171b4e0186580be78176d56dc12c469f349c7011dc7bd3f06cbf901be01c1fe9ae2ab5b1aecf0ba59529b9755fc385a06417d19e6b771463e1a229b77df1c7cf6a7beb8b659448dc8d13c63cb48cbd482f0a36397c9e77d8a6b392da7a63918a2706ebef9bbed59c323054f6f31a889145b8ecd764749702388e7b5a30c3fd62d0bf38905ad7c0a482c9002f3c8168953e2f5107a80c82fc67eb273e3469123320297fccb98034a016ede2a5b9b404f6dab07ad5cc3c78b54ef6fae55c5e226aa49a4c9c19ee31241b870f11cbcb920cf8e09737fb1905779f0bb2a705f2ad364385899ca289696e5ddb856b8f4956208bf41c6b5042d98f7102f6ad888b591a11b3218232b7c248254dce74f4f525f4bcc790cb3ade98d40dbf29e729f6094085679d202770c45abb1f5528748ed98b93cb4ccfd382b5b2ca6fe56f068cac8b650481d1fdb021dca8d62eb0f082b4653f6e00ad0ff467214b197e5005702343f4abc325af3005ad5550d3b6dcfa2c4e9422700376532dcfb984d28afcb37db53767184552e01cab63177abc62fae0eb7e474fee0d8ef8950d14e29d661a99f887118486acb6c10e29764357046e708dff12265cbf682d2e613f9cf64881321d4f8a23ab3fdc6ff3029f11ba989a6134053b559a1d3df52412295522ebc20447ce3f21554aa39e73c69ace4a0856593ff41ff48075dd60a9e64c2e9232e47a9397f398b7043db3faeb39a5a0063b7ccd221b10c4da20ca272cd9d32aaf3e7fe7d2f81b9c6d434feac3d0a3c6aca48a8585512680c514040ef20c53521c9556e1db84174e9fde6242be75c17c36b84126f9d4378118a94c14e52bb113d94c4df845d2b7f5c3347845ddc3110c5b95712de532740c57c44e2cffdfaafbbfec576000a21e05a8505aeb79cc286ae4260be665818e8c2632f520b1e807f047b5ce8e8581f557e53f\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]},{"title":"联通日记—12","url":"/2025/08/08/%E6%97%A5%E8%AE%B0/%E8%81%94%E9%80%9A%E6%97%A5%E8%AE%B0%E2%80%9412/","content":"\n  5f9be43e645108c1782dd60542d5d3fd15e8e939d57e2cbc5d061d1e66cde9b78d007d8ce2b0698d692d9738f244429611318f51d8024ee582714f4c2a08101194306e974fc482d765d7e49d7b812e21b2b0b768d050f21ae1f616ce13c4801035524a738a396d70bc9018d69142c4e6e90755050f60db384a8468e73dd297affd00fb1dafc084decc8bcb9202718a21875606bb794276c3975144ae5e701f0f9830f435b88d009bb6e945036d04f8ab2e1f330cf03d07b10ac2cee5e4949878717d4b7019df0abe33c43da44f17e0e51ae5c9b63b90024c6f390800e994253706fd634722934ac7deb029291d805cc67eb1e044bfe3103c4cd78b34a0c15aa95485bef5bf2a8a41e0dbb42ebec96cafe667773096b59b34eee8f63ecd7bfb01164a902960539e53393bf59bcbf687fb612c192eb6c6d07886aacc9ab0caad948d2456b6939cd6e5e95b661e5a3ef24efb5d0f46b5ea0fbec47ab2fc7202f84eb165a8a14b614555bb5d56f3c187818525b6dbdd94ebb495754b1d3829083605ff81f6d415be3396533199ee7243456292b8814319dff2a6642d1ecd47b18ffdb9e935eb25297d58cd36fe2f46de22496ba8f73be27bbb0e3f837d372f4fdc03a4157ad85a39bb898271340cd354fb503d0294dd73316c7d6a538af3863dd419c86fd3f7ad2e42bcc407400110facf6395ab092f088828c3778044e6ff09601f119eed1e8f1f328e7f99535ff6f41b8dd0c7722285557a7fbffc1128ea4e61a7c39603b3076d06d509a8723ffd37c6dddfda5dcddb68dc878e8e7b3ead8b79164527794bb216b25edd743fd2fbe39202aaa1d498df1ce361501a61ba78330b7e416edba872642dd3280c26f98e82d2c516b9904fe9d25d7fd5d3fce521bf2e47783586da4f17c01860276de409feb3c6c2cd505785365ace0ee0f2883073e310321c56049a07821b6f4d03c4e6c1db59b927a74a71effe002da8ced399dd2bfd6222d59eaeaa21e5bff6769f8b814723b1e76170a61dfc99b68c0a0e50c3419df00ab5503c493f1e5bbd7d1491b6e1ae2bc65a159fc601ccede5da5e4b914d17d2bb06dacb52dbaf310b7a545d2fbd8bd96b05304e8bdb5bcf802b9d397fa23f948c444b0ae3e874ecd12f233cceadd19ed1673606d7750e67af8def5cdb1fc91f93bc76769f366510a7d3ea80170086a67770d6aef114b20ce6ad8efad4daf517082acc91a0accd2343af4ad02fecf8cdb0044f2d6a235cf674b910e36ee2f219f5a99dc60054cb9bfbd43f47b4aeb7b6558d7500ce9c1123bd0995d91edfad8607b1fed81a041e9ee9929351e299c0066f97cda3cef17397fefb8f05e4b0b7b2809aa60527fb39a90dc1b7e617fdc0884825a47f4d3081e4e926e35e48f56f82970e848b6f733811c58ba374e1ad1349f7249b3e2ef5db2ef23fd8e39dc953\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["联通日记"],"tags":["日记"]}]